
Final Version.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028c  00800100  000015ce  00001662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080038c  0080038c  000018ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f4  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a25  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc7  00000000  00000000  000039b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  0000467c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00004af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001036  00000000  00000000  00005076  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_10>
      2c:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__vector_11>
      30:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_12>
      34:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_13>
      38:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ec       	ldi	r30, 0xCE	; 206
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 38       	cpi	r26, 0x8C	; 140
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac e8       	ldi	r26, 0x8C	; 140
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3a       	cpi	r26, 0xA6	; 166
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 8a 03 	call	0x714	; 0x714 <main>
      9e:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
      a6:	e0 ec       	ldi	r30, 0xC0	; 192
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	90 81       	ld	r25, Z
      ac:	95 ff       	sbrs	r25, 5
      ae:	fd cf       	rjmp	.-6      	; 0xaa <uart_putchar+0x4>
	UDR0 = c;
      b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	08 95       	ret

000000ba <uart_getchar>:
/******************************************************************************
******************************************************************************/
int  uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
      ba:	e0 ec       	ldi	r30, 0xC0	; 192
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	88 23       	and	r24, r24
      c2:	ec f7       	brge	.-6      	; 0xbe <uart_getchar+0x4>
	return UDR0;
      c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	08 95       	ret

000000cc <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
      cc:	88 e1       	ldi	r24, 0x18	; 24
      ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
      d2:	87 e6       	ldi	r24, 0x67	; 103
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
      da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	stdout = &mystdout;
      de:	e0 ea       	ldi	r30, 0xA0	; 160
      e0:	f3 e0       	ldi	r31, 0x03	; 3
      e2:	8a e1       	ldi	r24, 0x1A	; 26
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	93 83       	std	Z+3, r25	; 0x03
      e8:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
      ea:	8c e0       	ldi	r24, 0x0C	; 12
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	91 83       	std	Z+1, r25	; 0x01
      f0:	80 83       	st	Z, r24
      f2:	08 95       	ret

000000f4 <init_hardware>:
}
void init_hardware(void)
{
  
	PORTC |= (1<<PORTC3) | (1<<PORTC4) | (1<<PORTC5)  ;   // Read C3-5
      f4:	88 b1       	in	r24, 0x08	; 8
      f6:	88 63       	ori	r24, 0x38	; 56
      f8:	88 b9       	out	0x08, r24	; 8
	DDRD = (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5)  ;     // Write D2-5
      fa:	8c e3       	ldi	r24, 0x3C	; 60
      fc:	8a b9       	out	0x0a, r24	; 10
      fe:	08 95       	ret

00000100 <set_row_low>:

void set_row_low(unsigned int row)
{
   
	
		if ( row == 0){
     100:	00 97       	sbiw	r24, 0x00	; 0
     102:	29 f4       	brne	.+10     	; 0x10e <set_row_low+0xe>
			PORTD &= ~(1<<2);
     104:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<3) | (1<<4) | (1<<5);
     106:	8b b1       	in	r24, 0x0b	; 11
     108:	88 63       	ori	r24, 0x38	; 56
     10a:	8b b9       	out	0x0b, r24	; 11
     10c:	08 95       	ret
		}else if( row == 1){
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	91 05       	cpc	r25, r1
     112:	29 f4       	brne	.+10     	; 0x11e <set_row_low+0x1e>
			PORTD &= ~(1<<3);
     114:	5b 98       	cbi	0x0b, 3	; 11
			PORTD |= (1<<2) | (1<<4) | (1<<5);
     116:	8b b1       	in	r24, 0x0b	; 11
     118:	84 63       	ori	r24, 0x34	; 52
     11a:	8b b9       	out	0x0b, r24	; 11
     11c:	08 95       	ret
		}else if( row == 2){
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	91 05       	cpc	r25, r1
     122:	29 f4       	brne	.+10     	; 0x12e <set_row_low+0x2e>
			PORTD &= ~(1<<4);
     124:	5c 98       	cbi	0x0b, 4	; 11
			PORTD |= (1<<2) | (1<<3) | (1<<5);
     126:	8b b1       	in	r24, 0x0b	; 11
     128:	8c 62       	ori	r24, 0x2C	; 44
     12a:	8b b9       	out	0x0b, r24	; 11
     12c:	08 95       	ret
		}else if( row == 3){
     12e:	03 97       	sbiw	r24, 0x03	; 3
     130:	21 f4       	brne	.+8      	; 0x13a <set_row_low+0x3a>
			PORTD &= ~(1<<5);
     132:	5d 98       	cbi	0x0b, 5	; 11
			PORTD |= (1<<2) | (1<<3) | (1<<4);
     134:	8b b1       	in	r24, 0x0b	; 11
     136:	8c 61       	ori	r24, 0x1C	; 28
     138:	8b b9       	out	0x0b, r24	; 11
     13a:	08 95       	ret

0000013c <col_pushed>:

int col_pushed(void)
{
   
	
	if( ( PINC &  (1<<PINC3) ) == 0 ){
     13c:	33 9b       	sbis	0x06, 3	; 6
     13e:	07 c0       	rjmp	.+14     	; 0x14e <col_pushed+0x12>
		return 1;
	}if( ( PINC & (1<<PINC4) ) == 0 ){
     140:	34 9b       	sbis	0x06, 4	; 6
     142:	08 c0       	rjmp	.+16     	; 0x154 <col_pushed+0x18>
		return 2;
	}if( ( PINC & (1<<PINC5) ) == 0 ){
     144:	35 9b       	sbis	0x06, 5	; 6
     146:	09 c0       	rjmp	.+18     	; 0x15a <col_pushed+0x1e>
		return 3;
	}else {
		return 0;
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
int col_pushed(void)
{
   
	
	if( ( PINC &  (1<<PINC3) ) == 0 ){
		return 1;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret
	}if( ( PINC & (1<<PINC4) ) == 0 ){
		return 2;
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret
	}if( ( PINC & (1<<PINC5) ) == 0 ){
		return 3;
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	90 e0       	ldi	r25, 0x00	; 0
	}else {
		return 0;
	}

	
}
     15e:	08 95       	ret

00000160 <get_button>:
                      {'4', '5', '6'},
                      {'7', '8', '9'},
                      {'*', '0', '#'}};

char get_button(void)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
    //Use the scanning example from main_test_1()
    //to build a simple code that scans and waits for
    //a button press. Return the character pressed.
	
	init_hardware();
     164:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_hardware>
	
	init_uart(); // initialization
     168:	0e 94 66 00 	call	0xcc	; 0xcc <init_uart>
	
		
	for(int row = 0; row < 4; row++){
     16c:	c0 e0       	ldi	r28, 0x00	; 0
     16e:	d0 e0       	ldi	r29, 0x00	; 0
		set_row_low(row);
     170:	ce 01       	movw	r24, r28
     172:	0e 94 80 00 	call	0x100	; 0x100 <set_row_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     176:	2f ef       	ldi	r18, 0xFF	; 255
     178:	89 ef       	ldi	r24, 0xF9	; 249
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	80 40       	sbci	r24, 0x00	; 0
     180:	90 40       	sbci	r25, 0x00	; 0
     182:	e1 f7       	brne	.-8      	; 0x17c <get_button+0x1c>
     184:	00 c0       	rjmp	.+0      	; 0x186 <get_button+0x26>
     186:	00 00       	nop
		_delay_ms(20);

		int col = col_pushed();
     188:	0e 94 9e 00 	call	0x13c	; 0x13c <col_pushed>

		if(col != 0){
     18c:	00 97       	sbiw	r24, 0x00	; 0
     18e:	59 f0       	breq	.+22     	; 0x1a6 <get_button+0x46>
			char buttonpress = buttons[row][col-1];
     190:	9e 01       	movw	r18, r28
     192:	22 0f       	add	r18, r18
     194:	33 1f       	adc	r19, r19
     196:	c2 0f       	add	r28, r18
     198:	d3 1f       	adc	r29, r19
     19a:	c8 0f       	add	r28, r24
     19c:	d9 1f       	adc	r29, r25
     19e:	c1 50       	subi	r28, 0x01	; 1
     1a0:	df 4f       	sbci	r29, 0xFF	; 255
			return buttonpress;
     1a2:	88 81       	ld	r24, Y
     1a4:	04 c0       	rjmp	.+8      	; 0x1ae <get_button+0x4e>
	init_hardware();
	
	init_uart(); // initialization
	
		
	for(int row = 0; row < 4; row++){
     1a6:	21 96       	adiw	r28, 0x01	; 1
     1a8:	c4 30       	cpi	r28, 0x04	; 4
     1aa:	d1 05       	cpc	r29, r1
     1ac:	09 f7       	brne	.-62     	; 0x170 <get_button+0x10>
		if(col != 0){
			char buttonpress = buttons[row][col-1];
			return buttonpress;
		}
	}
}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <get_new_button>:
char get_new_button(void)
{
    static char last_button;
    char b = get_button();
     1b4:	0e 94 b0 00 	call	0x160	; 0x160 <get_button>
	
    //Check if we held button down
    if(b == last_button) return 0;
     1b8:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <__data_end>
     1bc:	89 17       	cp	r24, r25
     1be:	19 f0       	breq	.+6      	; 0x1c6 <get_new_button+0x12>
    
    last_button = b;
     1c0:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <__data_end>
    
    return b;
     1c4:	08 95       	ret
{
    static char last_button;
    char b = get_button();
	
    //Check if we held button down
    if(b == last_button) return 0;
     1c6:	80 e0       	ldi	r24, 0x00	; 0
    
    last_button = b;
    
    return b;
}
     1c8:	08 95       	ret

000001ca <F>:
/* Function F controls the time measurements associated with the keypad*/
void F(int x){
	
	TCCR0A = (1<<WGM01);  // Enables CTC mode (compare on match)
     1ca:	22 e0       	ldi	r18, 0x02	; 2
     1cc:	24 bd       	out	0x24, r18	; 36
	OCR0A = 244;   // number of counts needed for 1sec
     1ce:	24 ef       	ldi	r18, 0xF4	; 244
     1d0:	27 bd       	out	0x27, r18	; 39
	TIMSK0 |= (1 << OCIE0A );  // compares values with A
     1d2:	ee e6       	ldi	r30, 0x6E	; 110
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	20 81       	ld	r18, Z
     1d8:	22 60       	ori	r18, 0x02	; 2
     1da:	20 83       	st	Z, r18
	TCCR0B |= (1<<CS02);  // determines the speed (pre-scale /256)
     1dc:	25 b5       	in	r18, 0x25	; 37
     1de:	24 60       	ori	r18, 0x04	; 4
     1e0:	25 bd       	out	0x25, r18	; 37
	
	sei();
     1e2:	78 94       	sei
	
	while(1){
		 //printf("ex = %d, x = %d \n", ex, x);
		 if(ex >= x){
     1e4:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <ex>
     1e8:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <ex+0x1>
     1ec:	28 17       	cp	r18, r24
     1ee:	39 07       	cpc	r19, r25
     1f0:	c8 f3       	brcs	.-14     	; 0x1e4 <F+0x1a>
			 ex = 0;
     1f2:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <ex+0x1>
     1f6:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <ex>
     1fa:	08 95       	ret

000001fc <Blink>:
	
	Keypad();
	
}
/* blinks the RED LED during the arm countdown phase, to indicate transition */
void Blink(void){
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
	
	for(int i = 0; i < 15; i++){
     204:	c0 e0       	ldi	r28, 0x00	; 0
     206:	d0 e0       	ldi	r29, 0x00	; 0
		DDRC |= (1<<PC1); 
		PINC |= (1<<PC1); 
		printf("\n%d seconds has passed", (i + 1));
     208:	06 e3       	ldi	r16, 0x36	; 54
     20a:	11 e0       	ldi	r17, 0x01	; 1
}
/* blinks the RED LED during the arm countdown phase, to indicate transition */
void Blink(void){
	
	for(int i = 0; i < 15; i++){
		DDRC |= (1<<PC1); 
     20c:	39 9a       	sbi	0x07, 1	; 7
		PINC |= (1<<PC1); 
     20e:	31 9a       	sbi	0x06, 1	; 6
		printf("\n%d seconds has passed", (i + 1));
     210:	21 96       	adiw	r28, 0x01	; 1
     212:	df 93       	push	r29
     214:	cf 93       	push	r28
     216:	1f 93       	push	r17
     218:	0f 93       	push	r16
     21a:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
		F(244);
     21e:	84 ef       	ldi	r24, 0xF4	; 244
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 e5 00 	call	0x1ca	; 0x1ca <F>
	
}
/* blinks the RED LED during the arm countdown phase, to indicate transition */
void Blink(void){
	
	for(int i = 0; i < 15; i++){
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	cf 30       	cpi	r28, 0x0F	; 15
     230:	d1 05       	cpc	r29, r1
     232:	61 f7       	brne	.-40     	; 0x20c <Blink+0x10>
		PINC |= (1<<PC1); 
		printf("\n%d seconds has passed", (i + 1));
		F(244);
	}
	return;
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	08 95       	ret

0000023e <ONMotion>:
	return;	
}

void ONMotion(void) {
	
	DDRD &= ~(1<<PORTD6); //Sets D6 to read
     23e:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= (1<<PORTD6); //Creates pullup resistor //meaning when its low its high
     240:	5e 9a       	sbi	0x0b, 6	; 11
	
	DDRC |= (1<<PORTC2); //Sets C2 to write
     242:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~(1<<PORTC2); //turns off C2
     244:	42 98       	cbi	0x08, 2	; 8
	
	PCMSK2 |= (1<<PCINT22); //Enables on pin D6 to detect change
     246:	ed e6       	ldi	r30, 0x6D	; 109
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE2); //Enables interrupt
     250:	e8 e6       	ldi	r30, 0x68	; 104
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	84 60       	ori	r24, 0x04	; 4
     258:	80 83       	st	Z, r24
	
	sei();
     25a:	78 94       	sei
     25c:	08 95       	ret

0000025e <Audio_Alarm>:
	PIN(); //Sends back to pin to allow for disarm
	
}

void Audio_Alarm(void){
	DDRD |= (1<<PORTD3); //PD3 is audio output
     25e:	53 9a       	sbi	0x0a, 3	; 10
	OCR2A = 32;   //set freq
     260:	80 e2       	ldi	r24, 0x20	; 32
     262:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	OCR2B = 16;  // sets PWM %
     266:	80 e1       	ldi	r24, 0x10	; 16
     268:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
	
	TCCR2A |= (1<< COM2B1);// set non-inverting mode
     26c:	a0 eb       	ldi	r26, 0xB0	; 176
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	8c 91       	ld	r24, X
     272:	80 62       	ori	r24, 0x20	; 32
     274:	8c 93       	st	X, r24
	
	TCCR2B |= (1<<WGM22); //fast PWM mode, OCR2A as top
     276:	e1 eb       	ldi	r30, 0xB1	; 177
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	88 60       	ori	r24, 0x08	; 8
     27e:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM21) | (1<<WGM20);
     280:	8c 91       	ld	r24, X
     282:	83 60       	ori	r24, 0x03	; 3
     284:	8c 93       	st	X, r24
	
	TCCR2B |= (1<<CS22) | (1<<CS20); //set pre-scaler to 128 and starts PWM
     286:	80 81       	ld	r24, Z
     288:	85 60       	ori	r24, 0x05	; 5
     28a:	80 83       	st	Z, r24
     28c:	24 e0       	ldi	r18, 0x04	; 4
     28e:	30 e0       	ldi	r19, 0x00	; 0
	
	while (1) {
		for (int i=0; i<4;i++) //set number of sound cycles here
		{                           //paste desired sound effect here
			OCR2A = 379;
     290:	e3 eb       	ldi	r30, 0xB3	; 179
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	8b e7       	ldi	r24, 0x7B	; 123
			DDRD=0;
			_delay_ms(25);
			DDRD |= (1<<PORTD3);
			OCR2A = 379;
			_delay_ms(150);
			OCR2A = 350;
     296:	9e e5       	ldi	r25, 0x5E	; 94
	TCCR2B |= (1<<CS22) | (1<<CS20); //set pre-scaler to 128 and starts PWM
	
	while (1) {
		for (int i=0; i<4;i++) //set number of sound cycles here
		{                           //paste desired sound effect here
			OCR2A = 379;
     298:	80 83       	st	Z, r24
     29a:	4f ef       	ldi	r20, 0xFF	; 255
     29c:	55 ea       	ldi	r21, 0xA5	; 165
     29e:	6e e0       	ldi	r22, 0x0E	; 14
     2a0:	41 50       	subi	r20, 0x01	; 1
     2a2:	50 40       	sbci	r21, 0x00	; 0
     2a4:	60 40       	sbci	r22, 0x00	; 0
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <Audio_Alarm+0x42>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <Audio_Alarm+0x4c>
     2aa:	00 00       	nop
			_delay_ms(300);
			DDRD=0;
     2ac:	1a b8       	out	0x0a, r1	; 10
     2ae:	4f e7       	ldi	r20, 0x7F	; 127
     2b0:	58 e3       	ldi	r21, 0x38	; 56
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	41 50       	subi	r20, 0x01	; 1
     2b6:	50 40       	sbci	r21, 0x00	; 0
     2b8:	60 40       	sbci	r22, 0x00	; 0
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <Audio_Alarm+0x56>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <Audio_Alarm+0x60>
     2be:	00 00       	nop
			_delay_ms(25);
			DDRD |= (1<<PORTD3);
     2c0:	53 9a       	sbi	0x0a, 3	; 10
			OCR2A = 379;
     2c2:	80 83       	st	Z, r24
     2c4:	4f ef       	ldi	r20, 0xFF	; 255
     2c6:	52 e5       	ldi	r21, 0x52	; 82
     2c8:	67 e0       	ldi	r22, 0x07	; 7
     2ca:	41 50       	subi	r20, 0x01	; 1
     2cc:	50 40       	sbci	r21, 0x00	; 0
     2ce:	60 40       	sbci	r22, 0x00	; 0
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <Audio_Alarm+0x6c>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <Audio_Alarm+0x76>
     2d4:	00 00       	nop
			_delay_ms(150);
			DDRD=0;
     2d6:	1a b8       	out	0x0a, r1	; 10
     2d8:	4f e7       	ldi	r20, 0x7F	; 127
     2da:	58 e3       	ldi	r21, 0x38	; 56
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	41 50       	subi	r20, 0x01	; 1
     2e0:	50 40       	sbci	r21, 0x00	; 0
     2e2:	60 40       	sbci	r22, 0x00	; 0
     2e4:	e1 f7       	brne	.-8      	; 0x2de <Audio_Alarm+0x80>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <Audio_Alarm+0x8a>
     2e8:	00 00       	nop
			_delay_ms(25);
			DDRD |= (1<<PORTD3);
     2ea:	53 9a       	sbi	0x0a, 3	; 10
			OCR2A = 379;
     2ec:	80 83       	st	Z, r24
     2ee:	4f ef       	ldi	r20, 0xFF	; 255
     2f0:	52 e5       	ldi	r21, 0x52	; 82
     2f2:	67 e0       	ldi	r22, 0x07	; 7
     2f4:	41 50       	subi	r20, 0x01	; 1
     2f6:	50 40       	sbci	r21, 0x00	; 0
     2f8:	60 40       	sbci	r22, 0x00	; 0
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <Audio_Alarm+0x96>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <Audio_Alarm+0xa0>
     2fe:	00 00       	nop
			_delay_ms(150);
			OCR2A = 350;
     300:	90 83       	st	Z, r25
     302:	4f ef       	ldi	r20, 0xFF	; 255
     304:	52 e5       	ldi	r21, 0x52	; 82
     306:	67 e0       	ldi	r22, 0x07	; 7
     308:	41 50       	subi	r20, 0x01	; 1
     30a:	50 40       	sbci	r21, 0x00	; 0
     30c:	60 40       	sbci	r22, 0x00	; 0
     30e:	e1 f7       	brne	.-8      	; 0x308 <Audio_Alarm+0xaa>
     310:	00 c0       	rjmp	.+0      	; 0x312 <Audio_Alarm+0xb4>
     312:	00 00       	nop
			_delay_ms(150);
			OCR2A = 379;
     314:	80 83       	st	Z, r24
     316:	4f ef       	ldi	r20, 0xFF	; 255
     318:	52 e5       	ldi	r21, 0x52	; 82
     31a:	67 e0       	ldi	r22, 0x07	; 7
     31c:	41 50       	subi	r20, 0x01	; 1
     31e:	50 40       	sbci	r21, 0x00	; 0
     320:	60 40       	sbci	r22, 0x00	; 0
     322:	e1 f7       	brne	.-8      	; 0x31c <Audio_Alarm+0xbe>
     324:	00 c0       	rjmp	.+0      	; 0x326 <Audio_Alarm+0xc8>
     326:	00 00       	nop
			_delay_ms(150);
			DDRD=0;
     328:	1a b8       	out	0x0a, r1	; 10
     32a:	4f e7       	ldi	r20, 0x7F	; 127
     32c:	58 e3       	ldi	r21, 0x38	; 56
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	41 50       	subi	r20, 0x01	; 1
     332:	50 40       	sbci	r21, 0x00	; 0
     334:	60 40       	sbci	r22, 0x00	; 0
     336:	e1 f7       	brne	.-8      	; 0x330 <Audio_Alarm+0xd2>
     338:	00 c0       	rjmp	.+0      	; 0x33a <Audio_Alarm+0xdc>
     33a:	00 00       	nop
			_delay_ms(25);
			DDRD |= (1<<PORTD3);
     33c:	53 9a       	sbi	0x0a, 3	; 10
     33e:	21 50       	subi	r18, 0x01	; 1
     340:	31 09       	sbc	r19, r1
	TCCR2A |= (1<<WGM21) | (1<<WGM20);
	
	TCCR2B |= (1<<CS22) | (1<<CS20); //set pre-scaler to 128 and starts PWM
	
	while (1) {
		for (int i=0; i<4;i++) //set number of sound cycles here
     342:	09 f0       	breq	.+2      	; 0x346 <Audio_Alarm+0xe8>
     344:	a9 cf       	rjmp	.-174    	; 0x298 <Audio_Alarm+0x3a>
			DDRD=0;
			_delay_ms(25);
			DDRD |= (1<<PORTD3);
			
		}
		DDRD &= ~(1<<PORTD3); //turn of  audio output
     346:	53 98       	cbi	0x0a, 3	; 10
		TCCR2A &= ~(1<< COM2B1);// Disables the alarm ...
     348:	e0 eb       	ldi	r30, 0xB0	; 176
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	8f 7d       	andi	r24, 0xDF	; 223
     350:	80 83       	st	Z, r24
     352:	08 95       	ret

00000354 <Audio_Chirp>:
	}
	return;
	
}

void Audio_Chirp(void){
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
	DDRD |= (1<<PORTD3); //PD3 is output
     358:	53 9a       	sbi	0x0a, 3	; 10
	OCR2A = 32;   //set freq
     35a:	a3 eb       	ldi	r26, 0xB3	; 179
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	80 e2       	ldi	r24, 0x20	; 32
     360:	8c 93       	st	X, r24
	OCR2B = 16;  // sets PWM %
     362:	80 e1       	ldi	r24, 0x10	; 16
     364:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
	
	TCCR2A |= (1<< COM2B1);// set non-inverting mode
     368:	e0 eb       	ldi	r30, 0xB0	; 176
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	80 62       	ori	r24, 0x20	; 32
     370:	80 83       	st	Z, r24
	
	TCCR2B |= (1<<WGM22); //fast PWM mode, OCR2A as top
     372:	c1 eb       	ldi	r28, 0xB1	; 177
     374:	d0 e0       	ldi	r29, 0x00	; 0
     376:	88 81       	ld	r24, Y
     378:	88 60       	ori	r24, 0x08	; 8
     37a:	88 83       	st	Y, r24
	TCCR2A |= (1<<WGM21) | (1<<WGM20);
     37c:	80 81       	ld	r24, Z
     37e:	83 60       	ori	r24, 0x03	; 3
     380:	80 83       	st	Z, r24
	
	TCCR2B |= (1<<CS22) | (1<<CS20); //set prescaler to 128 and starts PWM
     382:	88 81       	ld	r24, Y
     384:	85 60       	ori	r24, 0x05	; 5
     386:	88 83       	st	Y, r24
	
	while (1) {
		for (int i=0; i<2;i++) //set number of sound cycles here one have 1 for testing
		{
			OCR2A = 380;
     388:	9c e7       	ldi	r25, 0x7C	; 124
     38a:	9c 93       	st	X, r25
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	30 e7       	ldi	r19, 0x70	; 112
     390:	42 e0       	ldi	r20, 0x02	; 2
     392:	21 50       	subi	r18, 0x01	; 1
     394:	30 40       	sbci	r19, 0x00	; 0
     396:	40 40       	sbci	r20, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <Audio_Chirp+0x3e>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <Audio_Chirp+0x48>
     39c:	00 00       	nop
			_delay_ms(50);
			OCR2A = 319;
     39e:	8f e3       	ldi	r24, 0x3F	; 63
     3a0:	8c 93       	st	X, r24
     3a2:	2f ef       	ldi	r18, 0xFF	; 255
     3a4:	30 e7       	ldi	r19, 0x70	; 112
     3a6:	42 e0       	ldi	r20, 0x02	; 2
     3a8:	21 50       	subi	r18, 0x01	; 1
     3aa:	30 40       	sbci	r19, 0x00	; 0
     3ac:	40 40       	sbci	r20, 0x00	; 0
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <Audio_Chirp+0x54>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <Audio_Chirp+0x5e>
     3b2:	00 00       	nop
	TCCR2B |= (1<<CS22) | (1<<CS20); //set prescaler to 128 and starts PWM
	
	while (1) {
		for (int i=0; i<2;i++) //set number of sound cycles here one have 1 for testing
		{
			OCR2A = 380;
     3b4:	9c 93       	st	X, r25
     3b6:	9f ef       	ldi	r25, 0xFF	; 255
     3b8:	20 e7       	ldi	r18, 0x70	; 112
     3ba:	32 e0       	ldi	r19, 0x02	; 2
     3bc:	91 50       	subi	r25, 0x01	; 1
     3be:	20 40       	sbci	r18, 0x00	; 0
     3c0:	30 40       	sbci	r19, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <Audio_Chirp+0x68>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <Audio_Chirp+0x72>
     3c6:	00 00       	nop
			_delay_ms(50);
			OCR2A = 319;
     3c8:	8c 93       	st	X, r24
     3ca:	4f ef       	ldi	r20, 0xFF	; 255
     3cc:	80 e7       	ldi	r24, 0x70	; 112
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	41 50       	subi	r20, 0x01	; 1
     3d2:	80 40       	sbci	r24, 0x00	; 0
     3d4:	90 40       	sbci	r25, 0x00	; 0
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <Audio_Chirp+0x7c>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <Audio_Chirp+0x86>
     3da:	00 00       	nop
			_delay_ms(50);
			//paste desired sound effect here
			
			
		}
		DDRD &= ~(1<<PORTD3); //turn of  audio output
     3dc:	53 98       	cbi	0x0a, 3	; 10
		TCCR2A &= ~(1<< COM2B1);// Disables the alarm ...
     3de:	80 81       	ld	r24, Z
     3e0:	8f 7d       	andi	r24, 0xDF	; 223
     3e2:	80 83       	st	Z, r24
	
	
	
	return;
	
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <halleffect>:

void halleffect(void)
{
	
	DDRB &= ~(1<<PORTB3); //Sets B3 to read
     3ea:	23 98       	cbi	0x04, 3	; 4
	PORTB |= (1<<PORTB3); //Creates pullup resistor //meaning when its low its high
     3ec:	2b 9a       	sbi	0x05, 3	; 5

	PCMSK0 |= (1<<PCINT3); //Enables on pin B3 to detect change
     3ee:	eb e6       	ldi	r30, 0x6B	; 107
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	88 60       	ori	r24, 0x08	; 8
     3f6:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0); //Enables interrupt
     3f8:	e8 e6       	ldi	r30, 0x68	; 104
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	80 83       	st	Z, r24
	
	sei();
     402:	78 94       	sei
     404:	08 95       	ret

00000406 <Trigger>:
	return avg/15;
	
}

void Trigger(void) {		// Config Timer 1 for 10 to 15uS pulse.
	if(MIP == 0) {	// Don't allow re-trigger.
     406:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <MIP>
     40a:	81 11       	cpse	r24, r1
     40c:	24 c0       	rjmp	.+72     	; 0x456 <Trigger+0x50>
		MIP = 1;				// Set Measurement in progress FLAG
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <MIP>
		DDRB |= (1<<PB1);		// PB1 as Output for Trigger pulse.
     414:	21 9a       	sbi	0x04, 1	; 4
		DDRD &= ~(1<<PB0);		// PB0 as Input for Input Capture (ECHO).
     416:	50 98       	cbi	0x0a, 0	; 10
		
		TCNT1 = 0;				// Clear last Echo times.
     418:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     41c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		ECHOHighPipe = 0;
     420:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <ECHOHighPipe+0x1>
     424:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <ECHOHighPipe>
		
		OCR1B = 10100;			// 10 mS Post echo Delay
     428:	84 e7       	ldi	r24, 0x74	; 116
     42a:	97 e2       	ldi	r25, 0x27	; 39
     42c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     430:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
		OCR1A = 12;				// 10 us Trigger length.
     434:	8c e0       	ldi	r24, 0x0C	; 12
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     43c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

		PORTB |= (1<<PB1);		// Start Pulse.
     440:	29 9a       	sbi	0x05, 1	; 5

		TIFR1 = 0xFF;			//  Clear all timer interrupt flags
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	86 bb       	out	0x16, r24	; 22
		TCCR1A = 0;   // Timer mode with Clear Output on Match
     446:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
		TCCR1B = (1<<WGM12) | (1<<CS11);  // Counting with CKio/8 CTC Mode enabled
     44a:	8a e0       	ldi	r24, 0x0A	; 10
     44c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		TIMSK1 = (1<<OCIE1A);	// enables the T/C1 Overflow, Compare A, and Capture interrupt;
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     456:	08 95       	ret

00000458 <InitEcho>:
	sei();

	return;
}

int InitEcho(void){
     458:	af 92       	push	r10
     45a:	bf 92       	push	r11
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	6e 97       	sbiw	r28, 0x1e	; 30
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
	int x = 0;
	int avg = 0;
	int y[15];
	
	sei();
     47c:	78 94       	sei
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	6c 01       	movw	r12, r24
     484:	7c 01       	movw	r14, r24

	return;
}

int InitEcho(void){
	int x = 0;
     486:	00 e0       	ldi	r16, 0x00	; 0
     488:	10 e0       	ldi	r17, 0x00	; 0
	while (x < 15){
		Trigger();
		while(MIP == 1) {}
		
		y[x] = ECHOLow;
		printf("\n Echo; %d - %dcm\n\n",	x, y[x]);
     48a:	0f 2e       	mov	r0, r31
     48c:	fd e4       	ldi	r31, 0x4D	; 77
     48e:	af 2e       	mov	r10, r31
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	bf 2e       	mov	r11, r31
     494:	f0 2d       	mov	r31, r0
	int y[15];
	
	sei();
	
	while (x < 15){
		Trigger();
     496:	0e 94 03 02 	call	0x406	; 0x406 <Trigger>
		while(MIP == 1) {}
     49a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <MIP>
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	e1 f3       	breq	.-8      	; 0x49a <InitEcho+0x42>
		
		y[x] = ECHOLow;
     4a2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <ECHOLow>
     4a6:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <ECHOLow+0x1>
     4aa:	f7 01       	movw	r30, r14
     4ac:	80 83       	st	Z, r24
     4ae:	91 83       	std	Z+1, r25	; 0x01
     4b0:	f2 e0       	ldi	r31, 0x02	; 2
     4b2:	ef 0e       	add	r14, r31
     4b4:	f1 1c       	adc	r15, r1
		printf("\n Echo; %d - %dcm\n\n",	x, y[x]);
     4b6:	9f 93       	push	r25
     4b8:	8f 93       	push	r24
     4ba:	1f 93       	push	r17
     4bc:	0f 93       	push	r16
     4be:	bf 92       	push	r11
     4c0:	af 92       	push	r10
     4c2:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
		
		x++;
     4c6:	0f 5f       	subi	r16, 0xFF	; 255
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
	int avg = 0;
	int y[15];
	
	sei();
	
	while (x < 15){
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 30       	cpi	r16, 0x0F	; 15
     4d8:	11 05       	cpc	r17, r1
     4da:	e9 f6       	brne	.-70     	; 0x496 <InitEcho+0x3e>
     4dc:	ae 01       	movw	r20, r28
     4de:	41 5e       	subi	r20, 0xE1	; 225
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
		
		x++;
	}
	
	for (int i = 0; i < 15; i++){
		avg = avg + y[i];
     4e6:	f6 01       	movw	r30, r12
     4e8:	21 91       	ld	r18, Z+
     4ea:	31 91       	ld	r19, Z+
     4ec:	6f 01       	movw	r12, r30
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
		printf("\n Echo; %d - %dcm\n\n",	x, y[x]);
		
		x++;
	}
	
	for (int i = 0; i < 15; i++){
     4f2:	e4 17       	cp	r30, r20
     4f4:	f5 07       	cpc	r31, r21
     4f6:	b9 f7       	brne	.-18     	; 0x4e6 <InitEcho+0x8e>
		avg = avg + y[i];
	}
	
	return avg/15;
     4f8:	6f e0       	ldi	r22, 0x0F	; 15
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	0e 94 af 07 	call	0xf5e	; 0xf5e <__divmodhi4>
     500:	cb 01       	movw	r24, r22
	
}
     502:	6e 96       	adiw	r28, 0x1e	; 30
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	bf 90       	pop	r11
     520:	af 90       	pop	r10
     522:	08 95       	ret

00000524 <ARMED>:
	return;
}
/*Activates the armed state, where RED LED lights up*/
int ARMED(int s){
	
	if( s == 1){
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	61 f4       	brne	.+24     	; 0x540 <ARMED+0x1c>
		PORTC |= (1<<PC1);
     528:	41 9a       	sbi	0x08, 1	; 8
		AvgEcho = InitEcho();
     52a:	0e 94 2c 02 	call	0x458	; 0x458 <InitEcho>
     52e:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <AvgEcho+0x1>
     532:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <AvgEcho>
		ONMotion();
     536:	0e 94 1f 01 	call	0x23e	; 0x23e <ONMotion>
		return 1;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret
	}else return 0;
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0

}
     544:	08 95       	ret

00000546 <Keypad>:
	}
		return;
		
}

void Keypad(void){
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	00 d0       	rcall	.+0      	; 0x54c <Keypad+0x6>
     54c:	00 d0       	rcall	.+0      	; 0x54e <Keypad+0x8>
     54e:	00 d0       	rcall	.+0      	; 0x550 <Keypad+0xa>
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
	
	init_hardware();
     554:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_hardware>
	init_uart(); // initialization
     558:	0e 94 66 00 	call	0xcc	; 0xcc <init_uart>
	
	int state = 0;  // state expresses the condition of the system
	char k[6];
	int j = 0;
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
void Keypad(void){
	
	init_hardware();
	init_uart(); // initialization
	
	int state = 0;  // state expresses the condition of the system
     560:	c1 2c       	mov	r12, r1
     562:	d1 2c       	mov	r13, r1
				j = 0;
			}
			
			//This is creating an array to check if the code is the admin code
			if (j < 6){
				printf("added %c is %d in the array \n", b, j);
     564:	0f 2e       	mov	r0, r31
     566:	f1 e6       	ldi	r31, 0x61	; 97
     568:	6f 2e       	mov	r6, r31
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	7f 2e       	mov	r7, r31
     56e:	f0 2d       	mov	r31, r0
			} else {
				j = 0;
			}
			
			//Checks if the array is equal to the admin code
			if( (k[0] == a[0]) &&  (k[1] == a[1]) && (k[2] == a[2]) && (k[3] == a[3]) && (k[4] == a[4]) && (k[5] == a[5]) ){
     570:	0f 2e       	mov	r0, r31
     572:	f8 e2       	ldi	r31, 0x28	; 40
     574:	ef 2e       	mov	r14, r31
     576:	f1 e0       	ldi	r31, 0x01	; 1
     578:	ff 2e       	mov	r15, r31
     57a:	f0 2d       	mov	r31, r0
		
			if( b == '#'){
				PORTC &=~ (1<<PC0);  // turn Green LED off
				Blink();   // Activate blinking of RED LED
				Audio_Chirp();
				state = ARMED(1);
     57c:	a1 2c       	mov	r10, r1
				printf("\n\rSystem is Armed \n \r");
     57e:	0f 2e       	mov	r0, r31
     580:	ff e7       	ldi	r31, 0x7F	; 127
     582:	2f 2e       	mov	r2, r31
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	3f 2e       	mov	r3, r31
     588:	f0 2d       	mov	r31, r0
					if (PINC & (1<<PINC2)){ //If PIR goes off
						if (AvgEcho < (ECHOLow - 3) || AvgEcho > (ECHOLow + 3)) { //Saying that a person came through the door
							detected = 1; //Slightly unnecessary only for repeats
							_delay_ms(2500);
							PORTC &= ~(1<<PORTC2);
							printf("Requesting Pin: \n \r");
     58a:	0f 2e       	mov	r0, r31
     58c:	fc ea       	ldi	r31, 0xAC	; 172
     58e:	4f 2e       	mov	r4, r31
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	5f 2e       	mov	r5, r31
     594:	f0 2d       	mov	r31, r0
					//halleffect();                                                                              ////////////////////////////////////////////// FIX MAKE IT RUN AT ALL TIMES (INTERRUPT)
					Trigger(); //Triggers to check change
					while (MIP == 1) {}
					if (PINC & (1<<PINC2)){ //If PIR goes off
						if (AvgEcho < (ECHOLow - 3) || AvgEcho > (ECHOLow + 3)) { //Saying that a person came through the door
							detected = 1; //Slightly unnecessary only for repeats
     596:	88 24       	eor	r8, r8
     598:	83 94       	inc	r8
     59a:	9a 2c       	mov	r9, r10
	char k[6];
	int j = 0;
	
	while(1){
		
		char b = get_new_button();
     59c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <get_new_button>
     5a0:	b8 2e       	mov	r11, r24
		
		if (b){
     5a2:	88 23       	and	r24, r24
     5a4:	d9 f3       	breq	.-10     	; 0x59c <Keypad+0x56>
			
			//resets the array every time a 0 is inputted
			if (b == '0'){
     5a6:	20 e3       	ldi	r18, 0x30	; 48
     5a8:	82 17       	cp	r24, r18
     5aa:	21 f0       	breq	.+8      	; 0x5b4 <Keypad+0x6e>
				j = 0;
			}
			
			//This is creating an array to check if the code is the admin code
			if (j < 6){
     5ac:	06 30       	cpi	r16, 0x06	; 6
     5ae:	11 05       	cpc	r17, r1
     5b0:	dc f4       	brge	.+54     	; 0x5e8 <Keypad+0xa2>
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <Keypad+0x72>
		
		if (b){
			
			//resets the array every time a 0 is inputted
			if (b == '0'){
				j = 0;
     5b4:	00 e0       	ldi	r16, 0x00	; 0
     5b6:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			//This is creating an array to check if the code is the admin code
			if (j < 6){
				printf("added %c is %d in the array \n", b, j);
     5b8:	1f 93       	push	r17
     5ba:	0f 93       	push	r16
     5bc:	1f 92       	push	r1
     5be:	bf 92       	push	r11
     5c0:	7f 92       	push	r7
     5c2:	6f 92       	push	r6
     5c4:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
				k[j] = b;
     5c8:	e1 e0       	ldi	r30, 0x01	; 1
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	ec 0f       	add	r30, r28
     5ce:	fd 1f       	adc	r31, r29
     5d0:	e0 0f       	add	r30, r16
     5d2:	f1 1f       	adc	r31, r17
     5d4:	b0 82       	st	Z, r11
				j++;
     5d6:	0f 5f       	subi	r16, 0xFF	; 255
     5d8:	1f 4f       	sbci	r17, 0xFF	; 255
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <Keypad+0xa6>
			} else {
				j = 0;
     5e8:	00 e0       	ldi	r16, 0x00	; 0
     5ea:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			//Checks if the array is equal to the admin code
			if( (k[0] == a[0]) &&  (k[1] == a[1]) && (k[2] == a[2]) && (k[3] == a[3]) && (k[4] == a[4]) && (k[5] == a[5]) ){
     5ec:	f7 01       	movw	r30, r14
     5ee:	80 81       	ld	r24, Z
     5f0:	99 81       	ldd	r25, Y+1	; 0x01
     5f2:	98 13       	cpse	r25, r24
     5f4:	16 c0       	rjmp	.+44     	; 0x622 <Keypad+0xdc>
     5f6:	81 81       	ldd	r24, Z+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	98 13       	cpse	r25, r24
     5fc:	12 c0       	rjmp	.+36     	; 0x622 <Keypad+0xdc>
     5fe:	82 81       	ldd	r24, Z+2	; 0x02
     600:	9b 81       	ldd	r25, Y+3	; 0x03
     602:	98 13       	cpse	r25, r24
     604:	0e c0       	rjmp	.+28     	; 0x622 <Keypad+0xdc>
     606:	83 81       	ldd	r24, Z+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	98 13       	cpse	r25, r24
     60c:	0a c0       	rjmp	.+20     	; 0x622 <Keypad+0xdc>
     60e:	84 81       	ldd	r24, Z+4	; 0x04
     610:	9d 81       	ldd	r25, Y+5	; 0x05
     612:	98 13       	cpse	r25, r24
     614:	06 c0       	rjmp	.+12     	; 0x622 <Keypad+0xdc>
     616:	85 81       	ldd	r24, Z+5	; 0x05
     618:	9e 81       	ldd	r25, Y+6	; 0x06
     61a:	98 13       	cpse	r25, r24
     61c:	02 c0       	rjmp	.+4      	; 0x622 <Keypad+0xdc>
				ADMIN();
     61e:	0e 94 a0 03 	call	0x740	; 0x740 <ADMIN>
			}
			
		
			if( b == '#'){
     622:	f3 e2       	ldi	r31, 0x23	; 35
     624:	bf 12       	cpse	r11, r31
     626:	10 c0       	rjmp	.+32     	; 0x648 <Keypad+0x102>
				PORTC &=~ (1<<PC0);  // turn Green LED off
     628:	40 98       	cbi	0x08, 0	; 8
				Blink();   // Activate blinking of RED LED
     62a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Blink>
				Audio_Chirp();
     62e:	0e 94 aa 01 	call	0x354	; 0x354 <Audio_Chirp>
				state = ARMED(1);
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	9a 2d       	mov	r25, r10
     636:	0e 94 92 02 	call	0x524	; 0x524 <ARMED>
     63a:	6c 01       	movw	r12, r24
				printf("\n\rSystem is Armed \n \r");
     63c:	3f 92       	push	r3
     63e:	2f 92       	push	r2
     640:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
			}
		
			if( state == 1){   // if system is armed, prepare to receive PIN
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	c2 16       	cp	r12, r18
     64c:	d1 04       	cpc	r13, r1
     64e:	09 f0       	breq	.+2      	; 0x652 <Keypad+0x10c>
     650:	4c c0       	rjmp	.+152    	; 0x6ea <Keypad+0x1a4>
				printf("Waiting for detection \n");
     652:	85 e9       	ldi	r24, 0x95	; 149
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
				while (state == 1) {
					//halleffect();                                                                              ////////////////////////////////////////////// FIX MAKE IT RUN AT ALL TIMES (INTERRUPT)
					Trigger(); //Triggers to check change
     65a:	0e 94 03 02 	call	0x406	; 0x406 <Trigger>
					while (MIP == 1) {}
     65e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <MIP>
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	e1 f3       	breq	.-8      	; 0x65e <Keypad+0x118>
					if (PINC & (1<<PINC2)){ //If PIR goes off
     666:	32 9b       	sbis	0x06, 2	; 6
     668:	f8 cf       	rjmp	.-16     	; 0x65a <Keypad+0x114>
						if (AvgEcho < (ECHOLow - 3) || AvgEcho > (ECHOLow + 3)) { //Saying that a person came through the door
     66a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <ECHOLow>
     66e:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <ECHOLow+0x1>
     672:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <AvgEcho>
     676:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <AvgEcho+0x1>
     67a:	03 97       	sbiw	r24, 0x03	; 3
     67c:	28 17       	cp	r18, r24
     67e:	39 07       	cpc	r19, r25
     680:	60 f0       	brcs	.+24     	; 0x69a <Keypad+0x154>
     682:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <ECHOLow>
     686:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <ECHOLow+0x1>
     68a:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <AvgEcho>
     68e:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <AvgEcho+0x1>
     692:	03 96       	adiw	r24, 0x03	; 3
     694:	82 17       	cp	r24, r18
     696:	93 07       	cpc	r25, r19
     698:	b8 f4       	brcc	.+46     	; 0x6c8 <Keypad+0x182>
							detected = 1; //Slightly unnecessary only for repeats
     69a:	90 92 8e 03 	sts	0x038E, r9	; 0x80038e <detected+0x1>
     69e:	80 92 8d 03 	sts	0x038D, r8	; 0x80038d <detected>
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	91 e1       	ldi	r25, 0x11	; 17
     6a6:	ea e7       	ldi	r30, 0x7A	; 122
     6a8:	81 50       	subi	r24, 0x01	; 1
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	e0 40       	sbci	r30, 0x00	; 0
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <Keypad+0x162>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <Keypad+0x16c>
     6b2:	00 00       	nop
							_delay_ms(2500);
							PORTC &= ~(1<<PORTC2);
     6b4:	42 98       	cbi	0x08, 2	; 8
							printf("Requesting Pin: \n \r");
     6b6:	5f 92       	push	r5
     6b8:	4f 92       	push	r4
     6ba:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
							PIN();
     6be:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <PIN>
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	c9 cf       	rjmp	.-110    	; 0x65a <Keypad+0x114>
						} else {
							printf("Unauthorized entry \n");
     6c8:	80 ec       	ldi	r24, 0xC0	; 192
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
     6d0:	ff ef       	ldi	r31, 0xFF	; 255
     6d2:	23 ed       	ldi	r18, 0xD3	; 211
     6d4:	80 e3       	ldi	r24, 0x30	; 48
     6d6:	f1 50       	subi	r31, 0x01	; 1
     6d8:	20 40       	sbci	r18, 0x00	; 0
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <Keypad+0x190>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <Keypad+0x19a>
     6e0:	00 00       	nop
							_delay_ms(1000);
							PORTC &= ~(1<<PORTC2);
     6e2:	42 98       	cbi	0x08, 2	; 8
							SignAlarm();
     6e4:	0e 94 ab 04 	call	0x956	; 0x956 <SignAlarm>
							break;
     6e8:	59 cf       	rjmp	.-334    	; 0x59c <Keypad+0x56>
						}
					}
				}
			} else {
				printf("System is unarmed \n");
     6ea:	84 ed       	ldi	r24, 0xD4	; 212
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
				detected = 0;
     6f2:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <detected+0x1>
     6f6:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <detected>
     6fa:	50 cf       	rjmp	.-352    	; 0x59c <Keypad+0x56>

000006fc <DISARM>:

}
/*Activates the disarmed state, where GREEN LED lights up*/
void DISARM(void){
	
	printf("System is Disarmed \n\r");
     6fc:	87 ee       	ldi	r24, 0xE7	; 231
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
	
	PORTC |= (1<<PC0);
     708:	40 9a       	sbi	0x08, 0	; 8
	PORTC &= ~ (1<<PC1);
     70a:	41 98       	cbi	0x08, 1	; 8
	
	DDRD |= (1<<PORTD7); 
     70c:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~(1<<PORTD7); //In case it was on
     70e:	5f 98       	cbi	0x0b, 7	; 11
	
	Keypad();
     710:	0e 94 a3 02 	call	0x546	; 0x546 <Keypad>

00000714 <main>:

/********************************************* Application*****************************************/

int main(void){

	init_hardware();
     714:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_hardware>
	init_uart(); // initialization
     718:	0e 94 66 00 	call	0xcc	; 0xcc <init_uart>
	printf("System Booted, built %s on %s \n", __TIME__, __DATE__);
     71c:	8d ef       	ldi	r24, 0xFD	; 253
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	89 e0       	ldi	r24, 0x09	; 9
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	82 e1       	ldi	r24, 0x12	; 18
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
	
	halleffect();
     738:	0e 94 f5 01 	call	0x3ea	; 0x3ea <halleffect>
	DISARM(); //Start in disarmed state
     73c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DISARM>

00000740 <ADMIN>:
	return;
}
/*Receives the PIN, and makes a decision accordingly*/
void ADMIN (void){
	
	init_hardware();
     740:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_hardware>
	init_uart(); // initialization
     744:	0e 94 66 00 	call	0xcc	; 0xcc <init_uart>
	
	printf("Admin Code launched \n\n");
     748:	82 e3       	ldi	r24, 0x32	; 50
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
	printf("Enter '*' to delete a pin and then add a new one \n");
     750:	88 e4       	ldi	r24, 0x48	; 72
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
	
	while(1){
		
		char b = get_new_button();
     758:	0e 94 da 00 	call	0x1b4	; 0x1b4 <get_new_button>
		int c = 0;
		
		if( b == '*'){  // delete the code
     75c:	8a 32       	cpi	r24, 0x2A	; 42
     75e:	e1 f7       	brne	.-8      	; 0x758 <ADMIN+0x18>
			
			for (c = 3; c >= 0; c--){
				d[c] = 0;
     760:	e2 e3       	ldi	r30, 0x32	; 50
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	13 82       	std	Z+3, r1	; 0x03
     766:	12 82       	std	Z+2, r1	; 0x02
     768:	11 82       	std	Z+1, r1	; 0x01
     76a:	10 82       	st	Z, r1
			}
			
			printf("Pin has been deleted \n \r");
     76c:	8a e7       	ldi	r24, 0x7A	; 122
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
			printf("Enter new pin \n\n");
     778:	83 e9       	ldi	r24, 0x93	; 147
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
			c = 0;
     784:	c0 e0       	ldi	r28, 0x00	; 0
     786:	d0 e0       	ldi	r29, 0x00	; 0
			
			while(1) {
				char b = get_new_button();
     788:	0e 94 da 00 	call	0x1b4	; 0x1b4 <get_new_button>
				if(b){
     78c:	88 23       	and	r24, r24
     78e:	29 f0       	breq	.+10     	; 0x79a <ADMIN+0x5a>
					d[c++] = b;
     790:	fe 01       	movw	r30, r28
     792:	ee 5c       	subi	r30, 0xCE	; 206
     794:	fe 4f       	sbci	r31, 0xFE	; 254
     796:	80 83       	st	Z, r24
     798:	21 96       	adiw	r28, 0x01	; 1
				}
				if (c == 4) {
     79a:	c4 30       	cpi	r28, 0x04	; 4
     79c:	d1 05       	cpc	r29, r1
     79e:	a1 f7       	brne	.-24     	; 0x788 <ADMIN+0x48>
					printf("Entered PIN: %s \n  \r", d);
     7a0:	82 e3       	ldi	r24, 0x32	; 50
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	83 ea       	ldi	r24, 0xA3	; 163
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
			}
			break;
		} 
	}
		
	printf("Restarting System \n  \n");
     7b4:	88 eb       	ldi	r24, 0xB8	; 184
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>

	Audio_Chirp();
     7bc:	0e 94 aa 01 	call	0x354	; 0x354 <Audio_Chirp>
	DISARM();
     7c0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DISARM>

000007c4 <PIN>:
	return;
}

void PIN(void){
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <PIN+0x1e>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <PIN+0x20>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
	
	init_hardware();
     7e8:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_hardware>
	init_uart(); // initialization
     7ec:	0e 94 66 00 	call	0xcc	; 0xcc <init_uart>

	TCCR0A &= ~(1<<WGM01);  // Disables CTC mode (compare on match)
     7f0:	84 b5       	in	r24, 0x24	; 36
     7f2:	8d 7f       	andi	r24, 0xFD	; 253
     7f4:	84 bd       	out	0x24, r24	; 36
	
	TIMSK0 = (1<<TOIE0); //Enables timer0 overflow interrupt
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCNT0 = 0x00; //Starts at 0 ticks
     7fc:	16 bc       	out	0x26, r1	; 38
	overflow = 0; //reset overflow
     7fe:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <overflow+0x1>
     802:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <overflow>
	TCCR0B = (1<<CS02); //determines the speed (pre-scale /256)
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	85 bd       	out	0x25, r24	; 37

	sei();
     80a:	78 94       	sei
     80c:	0f 2e       	mov	r0, r31
     80e:	f3 e0       	ldi	r31, 0x03	; 3
     810:	ef 2e       	mov	r14, r31
     812:	f1 2c       	mov	r15, r1
     814:	f0 2d       	mov	r31, r0
     816:	61 2c       	mov	r6, r1
     818:	71 2c       	mov	r7, r1
		}

		if (overflow < 7353) {
			if(i == 4){
				pin[4] = 0;
				printf("Entered PIN: %s \n \r", pin);
     81a:	0f 2e       	mov	r0, r31
     81c:	fe ec       	ldi	r31, 0xCE	; 206
     81e:	cf 2e       	mov	r12, r31
     820:	f2 e0       	ldi	r31, 0x02	; 2
     822:	df 2e       	mov	r13, r31
     824:	f0 2d       	mov	r31, r0
				
				if((pin[0] == e[0]) &&  (pin[1] == e[1]) && (pin[2] == e[2]) && (pin[3] == e[3])){  // Panic Code
     826:	0f 2e       	mov	r0, r31
     828:	fe e2       	ldi	r31, 0x2E	; 46
     82a:	8f 2e       	mov	r8, r31
     82c:	f1 e0       	ldi	r31, 0x01	; 1
     82e:	9f 2e       	mov	r9, r31
     830:	f0 2d       	mov	r31, r0
					printf("SILENT ALARM RAISED \n");
					DDRB |= (1<<PORTB2);
					PORTB |= (1<<PORTB2);
					DISARM();
				}
				else if( (pin[0] == d[0]) &&  (pin[1] == d[1]) && (pin[2] == d[2]) && (pin[3] == d[3]) ){
     832:	0f 2e       	mov	r0, r31
     834:	f2 e3       	ldi	r31, 0x32	; 50
     836:	af 2e       	mov	r10, r31
     838:	f1 e0       	ldi	r31, 0x01	; 1
     83a:	bf 2e       	mov	r11, r31
     83c:	f0 2d       	mov	r31, r0
	TIMSK0 = (1<<TOIE0); //Enables timer0 overflow interrupt
	TCNT0 = 0x00; //Starts at 0 ticks
	overflow = 0; //reset overflow
	TCCR0B = (1<<CS02); //determines the speed (pre-scale /256)

	sei();
     83e:	06 2d       	mov	r16, r6
     840:	17 2d       	mov	r17, r7
	int i = 0;
	int t = 0;  // t is the number of tries
	
	while(1){
		
		char b = get_new_button();
     842:	0e 94 da 00 	call	0x1b4	; 0x1b4 <get_new_button>
		
		if(b){
     846:	88 23       	and	r24, r24
     848:	49 f0       	breq	.+18     	; 0x85c <PIN+0x98>
			pin[i++] = b;
     84a:	e1 e0       	ldi	r30, 0x01	; 1
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	ec 0f       	add	r30, r28
     850:	fd 1f       	adc	r31, r29
     852:	e0 0f       	add	r30, r16
     854:	f1 1f       	adc	r31, r17
     856:	80 83       	st	Z, r24
     858:	0f 5f       	subi	r16, 0xFF	; 255
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		if (overflow < 7353) {
     85c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <overflow>
     860:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <overflow+0x1>
     864:	89 3b       	cpi	r24, 0xB9	; 185
     866:	9c 41       	sbci	r25, 0x1C	; 28
     868:	08 f0       	brcs	.+2      	; 0x86c <PIN+0xa8>
     86a:	58 c0       	rjmp	.+176    	; 0x91c <__stack+0x1d>
			if(i == 4){
     86c:	04 30       	cpi	r16, 0x04	; 4
     86e:	11 05       	cpc	r17, r1
     870:	41 f7       	brne	.-48     	; 0x842 <PIN+0x7e>
				pin[4] = 0;
     872:	1d 82       	std	Y+5, r1	; 0x05
				printf("Entered PIN: %s \n \r", pin);
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	8c 0f       	add	r24, r28
     87a:	9d 1f       	adc	r25, r29
     87c:	9f 93       	push	r25
     87e:	8f 93       	push	r24
     880:	df 92       	push	r13
     882:	cf 92       	push	r12
     884:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
				
				if((pin[0] == e[0]) &&  (pin[1] == e[1]) && (pin[2] == e[2]) && (pin[3] == e[3])){  // Panic Code
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	f4 01       	movw	r30, r8
     88c:	90 81       	ld	r25, Z
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	89 13       	cpse	r24, r25
     898:	14 c0       	rjmp	.+40     	; 0x8c2 <PIN+0xfe>
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	2a 81       	ldd	r18, Y+2	; 0x02
     89e:	29 13       	cpse	r18, r25
     8a0:	10 c0       	rjmp	.+32     	; 0x8c2 <PIN+0xfe>
     8a2:	92 81       	ldd	r25, Z+2	; 0x02
     8a4:	2b 81       	ldd	r18, Y+3	; 0x03
     8a6:	29 13       	cpse	r18, r25
     8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <PIN+0xfe>
     8aa:	93 81       	ldd	r25, Z+3	; 0x03
     8ac:	2c 81       	ldd	r18, Y+4	; 0x04
     8ae:	29 13       	cpse	r18, r25
     8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <PIN+0xfe>
					printf("SILENT ALARM RAISED \n");
     8b2:	82 ee       	ldi	r24, 0xE2	; 226
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
					DDRB |= (1<<PORTB2);
     8ba:	22 9a       	sbi	0x04, 2	; 4
					PORTB |= (1<<PORTB2);
     8bc:	2a 9a       	sbi	0x05, 2	; 5
					DISARM();
     8be:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DISARM>
				}
				else if( (pin[0] == d[0]) &&  (pin[1] == d[1]) && (pin[2] == d[2]) && (pin[3] == d[3]) ){
     8c2:	f5 01       	movw	r30, r10
     8c4:	90 81       	ld	r25, Z
     8c6:	89 13       	cpse	r24, r25
     8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <PIN+0x12e>
     8ca:	81 81       	ldd	r24, Z+1	; 0x01
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	98 13       	cpse	r25, r24
     8d0:	10 c0       	rjmp	.+32     	; 0x8f2 <PIN+0x12e>
     8d2:	82 81       	ldd	r24, Z+2	; 0x02
     8d4:	9b 81       	ldd	r25, Y+3	; 0x03
     8d6:	98 13       	cpse	r25, r24
     8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <PIN+0x12e>
     8da:	83 81       	ldd	r24, Z+3	; 0x03
     8dc:	9c 81       	ldd	r25, Y+4	; 0x04
     8de:	98 13       	cpse	r25, r24
     8e0:	08 c0       	rjmp	.+16     	; 0x8f2 <PIN+0x12e>
					t = 0;
					printf("correct \n \r");
     8e2:	87 ef       	ldi	r24, 0xF7	; 247
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	9f 93       	push	r25
     8e8:	8f 93       	push	r24
     8ea:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
					DISARM();
     8ee:	0e 94 7e 03 	call	0x6fc	; 0x6fc <DISARM>
     8f2:	f1 e0       	ldi	r31, 0x01	; 1
     8f4:	ef 1a       	sub	r14, r31
     8f6:	f1 08       	sbc	r15, r1
				}else{
					t++;
					if(t >= 3) {
     8f8:	09 f0       	breq	.+2      	; 0x8fc <PIN+0x138>
     8fa:	a1 cf       	rjmp	.-190    	; 0x83e <PIN+0x7a>
						printf("Attempt limit reached \n\r");
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
						TIMSK0 &= ~(1<<TOIE0); //Disables timer0 overflow interrupt
     908:	ee e6       	ldi	r30, 0x6E	; 110
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	8e 7f       	andi	r24, 0xFE	; 254
     910:	80 83       	st	Z, r24
						SignAlarm();
     912:	0e 94 ab 04 	call	0x956	; 0x956 <SignAlarm>
						break;
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0a c0       	rjmp	.+20     	; 0x930 <__stack+0x31>
				}
				i = 0;
			}
		} else {
			//Should never run
			printf("Time limit has run up \n\r");
     91c:	8c e1       	ldi	r24, 0x1C	; 28
     91e:	93 e0       	ldi	r25, 0x03	; 3
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	0e 94 d7 07 	call	0xfae	; 0xfae <printf>
			SignAlarm();
     928:	0e 94 ab 04 	call	0x956	; 0x956 <SignAlarm>
			break;
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
		}
	}
		return;
		
}
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	9f 90       	pop	r9
     94e:	8f 90       	pop	r8
     950:	7f 90       	pop	r7
     952:	6f 90       	pop	r6
     954:	08 95       	ret

00000956 <SignAlarm>:
}


void SignAlarm(void) {
	
	DDRD |= (1<<PORTD7); //Sets D7 to write
     956:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1<<PORTD7); //turns on D7
     958:	5f 9a       	sbi	0x0b, 7	; 11
	
	printf("THE ALARM HAS BEEN SET OFF \n");
     95a:	85 e3       	ldi	r24, 0x35	; 53
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
	
	Audio_Alarm(); //ALARM AUDIO TRIGGERED
     962:	0e 94 2f 01 	call	0x25e	; 0x25e <Audio_Alarm>
	
	PIN(); //Sends back to pin to allow for disarm
     966:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <PIN>
     96a:	08 95       	ret

0000096c <__vector_14>:
		TIMSK1 = (1<<OCIE1A);	// enables the T/C1 Overflow, Compare A, and Capture interrupt;
	}
	
}

ISR(TIMER0_COMPA_vect){
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
	
	ex++;
     97a:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <ex>
     97e:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <ex+0x1>
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <ex+0x1>
     988:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <ex>
	
}
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <__vector_5>:

ISR (PCINT2_vect) { //This interrupt detects a change.
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	2f 93       	push	r18
     9a6:	3f 93       	push	r19
     9a8:	4f 93       	push	r20
     9aa:	5f 93       	push	r21
     9ac:	6f 93       	push	r22
     9ae:	7f 93       	push	r23
     9b0:	8f 93       	push	r24
     9b2:	9f 93       	push	r25
     9b4:	af 93       	push	r26
     9b6:	bf 93       	push	r27
     9b8:	ef 93       	push	r30
     9ba:	ff 93       	push	r31
	printf("Detected \n"); //No printf's should be in interrupt but it works fine
     9bc:	81 e5       	ldi	r24, 0x51	; 81
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
	PORTC |= (1<<PORTC2); // LED on
     9c4:	42 9a       	sbi	0x08, 2	; 8
	PCICR &= ~(1<<PCIE2); //Disables interrupt
     9c6:	e8 e6       	ldi	r30, 0x68	; 104
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	8b 7f       	andi	r24, 0xFB	; 251
     9ce:	80 83       	st	Z, r24
}
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	bf 91       	pop	r27
     9d6:	af 91       	pop	r26
     9d8:	9f 91       	pop	r25
     9da:	8f 91       	pop	r24
     9dc:	7f 91       	pop	r23
     9de:	6f 91       	pop	r22
     9e0:	5f 91       	pop	r21
     9e2:	4f 91       	pop	r20
     9e4:	3f 91       	pop	r19
     9e6:	2f 91       	pop	r18
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_3>:

ISR (PCINT0_vect) { //This interrupt detects a change.
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	2f 93       	push	r18
     9fe:	3f 93       	push	r19
     a00:	4f 93       	push	r20
     a02:	5f 93       	push	r21
     a04:	6f 93       	push	r22
     a06:	7f 93       	push	r23
     a08:	8f 93       	push	r24
     a0a:	9f 93       	push	r25
     a0c:	af 93       	push	r26
     a0e:	bf 93       	push	r27
     a10:	ef 93       	push	r30
     a12:	ff 93       	push	r31
	printf("Detected Magnet has Moved\n"); 
     a14:	8b e5       	ldi	r24, 0x5B	; 91
     a16:	93 e0       	ldi	r25, 0x03	; 3
     a18:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
	SignAlarm();
     a1c:	0e 94 ab 04 	call	0x956	; 0x956 <SignAlarm>
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_16>:

ISR (TIMER0_OVF_vect) {
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31
	if (detected == 1) {
     a64:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <detected>
     a68:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <detected+0x1>
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f9 f4       	brne	.+62     	; 0xaae <__vector_16+0x6c>
		overflow++;
     a70:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <overflow>
     a74:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <overflow+0x1>
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <overflow+0x1>
     a7e:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <overflow>
		if (overflow >= 7353) {
     a82:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <overflow>
     a86:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <overflow+0x1>
     a8a:	89 3b       	cpi	r24, 0xB9	; 185
     a8c:	9c 41       	sbci	r25, 0x1C	; 28
     a8e:	78 f0       	brcs	.+30     	; 0xaae <__vector_16+0x6c>
			overflow = 0;
     a90:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <overflow+0x1>
     a94:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <overflow>
			printf("Time limit has run up \n");
     a98:	85 e7       	ldi	r24, 0x75	; 117
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	0e 94 ed 07 	call	0xfda	; 0xfda <puts>
			TIMSK0 &= ~(1<<TOIE0); //Disables timer0 overflow interrupt
     aa0:	ee e6       	ldi	r30, 0x6E	; 110
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	8e 7f       	andi	r24, 0xFE	; 254
     aa8:	80 83       	st	Z, r24
			SignAlarm();
     aaa:	0e 94 ab 04 	call	0x956	; 0x956 <SignAlarm>
		}
	}
}
     aae:	ff 91       	pop	r31
     ab0:	ef 91       	pop	r30
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	9f 91       	pop	r25
     ab8:	8f 91       	pop	r24
     aba:	7f 91       	pop	r23
     abc:	6f 91       	pop	r22
     abe:	5f 91       	pop	r21
     ac0:	4f 91       	pop	r20
     ac2:	3f 91       	pop	r19
     ac4:	2f 91       	pop	r18
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	0f 90       	pop	r0
     acc:	1f 90       	pop	r1
     ace:	18 95       	reti

00000ad0 <__vector_13>:

ISR (TIMER1_OVF_vect) {	// For long ECHO's
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
	if(ECHOHighPipe >= 2) {
     ade:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <ECHOHighPipe>
     ae2:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <ECHOHighPipe+0x1>
     ae6:	02 97       	sbiw	r24, 0x02	; 2
     ae8:	38 f0       	brcs	.+14     	; 0xaf8 <__vector_13+0x28>
		TIMSK1 = 0;	// No further interrupts.
     aea:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCCR1B = 0; // Stop Clock
     aee:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		MIP = 0xFF;	// End Measurement
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <MIP>
	}
	
	ECHOHighPipe++;	// Add 1 to High byte.
     af8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <ECHOHighPipe>
     afc:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <ECHOHighPipe+0x1>
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <ECHOHighPipe+0x1>
     b06:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <ECHOHighPipe>
}
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti

00000b18 <__vector_10>:

ISR (TIMER1_CAPT_vect) {	// Start and Stop ECHO measurement;
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	2f 93       	push	r18
     b24:	3f 93       	push	r19
     b26:	4f 93       	push	r20
     b28:	5f 93       	push	r21
     b2a:	6f 93       	push	r22
     b2c:	7f 93       	push	r23
     b2e:	8f 93       	push	r24
     b30:	9f 93       	push	r25
     b32:	af 93       	push	r26
     b34:	bf 93       	push	r27
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ef 93       	push	r30
     b3c:	ff 93       	push	r31
	if((TCCR1B & (1<<ICES1)) != 0) { // a rising edge has been detected
     b3e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     b42:	86 ff       	sbrs	r24, 6
     b44:	09 c0       	rjmp	.+18     	; 0xb58 <__vector_10+0x40>
		TCCR1B |= (1<<CS11);	// Start counting with ck/8;
     b46:	e1 e8       	ldi	r30, 0x81	; 129
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	82 60       	ori	r24, 0x02	; 2
     b4e:	80 83       	st	Z, r24
		TCCR1B &= ~(1<<ICES1);  // Configure Negative Edge Capture for end of echo pulse.
     b50:	80 81       	ld	r24, Z
     b52:	8f 7b       	andi	r24, 0xBF	; 191
     b54:	80 83       	st	Z, r24
     b56:	35 c0       	rjmp	.+106    	; 0xbc2 <__vector_10+0xaa>
	}
	
	else {						// a falling edge has been detected
		ECHOLow = TCNT1;
     b58:	c4 e8       	ldi	r28, 0x84	; 132
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
     b5c:	88 81       	ld	r24, Y
     b5e:	99 81       	ldd	r25, Y+1	; 0x01
     b60:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <ECHOLow+0x1>
     b64:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <ECHOLow>
		ECHOLow = ((ECHOLow*0.0000005)*1000000)/58.0;
     b68:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <ECHOLow>
     b6c:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <ECHOLow+0x1>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 b4 06 	call	0xd68	; 0xd68 <__floatunsisf>
     b78:	2d eb       	ldi	r18, 0xBD	; 189
     b7a:	37 e3       	ldi	r19, 0x37	; 55
     b7c:	46 e0       	ldi	r20, 0x06	; 6
     b7e:	55 e3       	ldi	r21, 0x35	; 53
     b80:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	34 e2       	ldi	r19, 0x24	; 36
     b88:	44 e7       	ldi	r20, 0x74	; 116
     b8a:	59 e4       	ldi	r21, 0x49	; 73
     b8c:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	48 e6       	ldi	r20, 0x68	; 104
     b96:	52 e4       	ldi	r21, 0x42	; 66
     b98:	0e 94 13 06 	call	0xc26	; 0xc26 <__divsf3>
     b9c:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fixunssfsi>
     ba0:	70 93 9b 03 	sts	0x039B, r23	; 0x80039b <ECHOLow+0x1>
     ba4:	60 93 9a 03 	sts	0x039A, r22	; 0x80039a <ECHOLow>
		ECHOHigh = ECHOHighPipe;
     ba8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <ECHOHighPipe>
     bac:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <ECHOHighPipe+0x1>
     bb0:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <ECHOHigh+0x1>
     bb4:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <ECHOHigh>
		TIMSK1 = (1<<OCIE1B);	// Enables the Compare B interrupt for POST Trigger Delay: Approx 10mS
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		TCNT1 = 0;
     bbe:	19 82       	std	Y+1, r1	; 0x01
     bc0:	18 82       	st	Y, r1
	}
}
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	bf 91       	pop	r27
     bcc:	af 91       	pop	r26
     bce:	9f 91       	pop	r25
     bd0:	8f 91       	pop	r24
     bd2:	7f 91       	pop	r23
     bd4:	6f 91       	pop	r22
     bd6:	5f 91       	pop	r21
     bd8:	4f 91       	pop	r20
     bda:	3f 91       	pop	r19
     bdc:	2f 91       	pop	r18
     bde:	0f 90       	pop	r0
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	0f 90       	pop	r0
     be4:	1f 90       	pop	r1
     be6:	18 95       	reti

00000be8 <__vector_12>:

ISR (TIMER1_COMPB_vect) {	// Compare B: Post ECHO delay 10mS
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
	MIP = 0;	// End Measurement
     bf2:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <MIP>
}
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <__vector_11>:

ISR (TIMER1_COMPA_vect) {	// Compare A : End of Trigger Pulse
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	8f 93       	push	r24
	PORTB &= ~(1<<PORTB1);
     c0c:	29 98       	cbi	0x05, 1	; 5
	TIMSK1 = (1<<ICIE1)|(1<<TOIE1); // enables the T/C1 Overflow and Capture interrupt;
     c0e:	81 e2       	ldi	r24, 0x21	; 33
     c10:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = (1<<ICES1);			// Set Positive edge for capture but Don't count yet
     c14:	80 e4       	ldi	r24, 0x40	; 64
     c16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     c1a:	8f 91       	pop	r24
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__divsf3>:
     c26:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divsf3x>
     c2a:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_round>
     c2e:	0e 94 01 07 	call	0xe02	; 0xe02 <__fp_pscB>
     c32:	58 f0       	brcs	.+22     	; 0xc4a <__divsf3+0x24>
     c34:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_pscA>
     c38:	40 f0       	brcs	.+16     	; 0xc4a <__divsf3+0x24>
     c3a:	29 f4       	brne	.+10     	; 0xc46 <__divsf3+0x20>
     c3c:	5f 3f       	cpi	r21, 0xFF	; 255
     c3e:	29 f0       	breq	.+10     	; 0xc4a <__divsf3+0x24>
     c40:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_inf>
     c44:	51 11       	cpse	r21, r1
     c46:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_szero>
     c4a:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__fp_nan>

00000c4e <__divsf3x>:
     c4e:	0e 94 19 07 	call	0xe32	; 0xe32 <__fp_split3>
     c52:	68 f3       	brcs	.-38     	; 0xc2e <__divsf3+0x8>

00000c54 <__divsf3_pse>:
     c54:	99 23       	and	r25, r25
     c56:	b1 f3       	breq	.-20     	; 0xc44 <__divsf3+0x1e>
     c58:	55 23       	and	r21, r21
     c5a:	91 f3       	breq	.-28     	; 0xc40 <__divsf3+0x1a>
     c5c:	95 1b       	sub	r25, r21
     c5e:	55 0b       	sbc	r21, r21
     c60:	bb 27       	eor	r27, r27
     c62:	aa 27       	eor	r26, r26
     c64:	62 17       	cp	r22, r18
     c66:	73 07       	cpc	r23, r19
     c68:	84 07       	cpc	r24, r20
     c6a:	38 f0       	brcs	.+14     	; 0xc7a <__divsf3_pse+0x26>
     c6c:	9f 5f       	subi	r25, 0xFF	; 255
     c6e:	5f 4f       	sbci	r21, 0xFF	; 255
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	44 1f       	adc	r20, r20
     c76:	aa 1f       	adc	r26, r26
     c78:	a9 f3       	breq	.-22     	; 0xc64 <__divsf3_pse+0x10>
     c7a:	35 d0       	rcall	.+106    	; 0xce6 <__divsf3_pse+0x92>
     c7c:	0e 2e       	mov	r0, r30
     c7e:	3a f0       	brmi	.+14     	; 0xc8e <__divsf3_pse+0x3a>
     c80:	e0 e8       	ldi	r30, 0x80	; 128
     c82:	32 d0       	rcall	.+100    	; 0xce8 <__divsf3_pse+0x94>
     c84:	91 50       	subi	r25, 0x01	; 1
     c86:	50 40       	sbci	r21, 0x00	; 0
     c88:	e6 95       	lsr	r30
     c8a:	00 1c       	adc	r0, r0
     c8c:	ca f7       	brpl	.-14     	; 0xc80 <__divsf3_pse+0x2c>
     c8e:	2b d0       	rcall	.+86     	; 0xce6 <__divsf3_pse+0x92>
     c90:	fe 2f       	mov	r31, r30
     c92:	29 d0       	rcall	.+82     	; 0xce6 <__divsf3_pse+0x92>
     c94:	66 0f       	add	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	88 1f       	adc	r24, r24
     c9a:	bb 1f       	adc	r27, r27
     c9c:	26 17       	cp	r18, r22
     c9e:	37 07       	cpc	r19, r23
     ca0:	48 07       	cpc	r20, r24
     ca2:	ab 07       	cpc	r26, r27
     ca4:	b0 e8       	ldi	r27, 0x80	; 128
     ca6:	09 f0       	breq	.+2      	; 0xcaa <__divsf3_pse+0x56>
     ca8:	bb 0b       	sbc	r27, r27
     caa:	80 2d       	mov	r24, r0
     cac:	bf 01       	movw	r22, r30
     cae:	ff 27       	eor	r31, r31
     cb0:	93 58       	subi	r25, 0x83	; 131
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	3a f0       	brmi	.+14     	; 0xcc4 <__divsf3_pse+0x70>
     cb6:	9e 3f       	cpi	r25, 0xFE	; 254
     cb8:	51 05       	cpc	r21, r1
     cba:	78 f0       	brcs	.+30     	; 0xcda <__divsf3_pse+0x86>
     cbc:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_inf>
     cc0:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_szero>
     cc4:	5f 3f       	cpi	r21, 0xFF	; 255
     cc6:	e4 f3       	brlt	.-8      	; 0xcc0 <__divsf3_pse+0x6c>
     cc8:	98 3e       	cpi	r25, 0xE8	; 232
     cca:	d4 f3       	brlt	.-12     	; 0xcc0 <__divsf3_pse+0x6c>
     ccc:	86 95       	lsr	r24
     cce:	77 95       	ror	r23
     cd0:	67 95       	ror	r22
     cd2:	b7 95       	ror	r27
     cd4:	f7 95       	ror	r31
     cd6:	9f 5f       	subi	r25, 0xFF	; 255
     cd8:	c9 f7       	brne	.-14     	; 0xccc <__divsf3_pse+0x78>
     cda:	88 0f       	add	r24, r24
     cdc:	91 1d       	adc	r25, r1
     cde:	96 95       	lsr	r25
     ce0:	87 95       	ror	r24
     ce2:	97 f9       	bld	r25, 7
     ce4:	08 95       	ret
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	88 1f       	adc	r24, r24
     cee:	bb 1f       	adc	r27, r27
     cf0:	62 17       	cp	r22, r18
     cf2:	73 07       	cpc	r23, r19
     cf4:	84 07       	cpc	r24, r20
     cf6:	ba 07       	cpc	r27, r26
     cf8:	20 f0       	brcs	.+8      	; 0xd02 <__divsf3_pse+0xae>
     cfa:	62 1b       	sub	r22, r18
     cfc:	73 0b       	sbc	r23, r19
     cfe:	84 0b       	sbc	r24, r20
     d00:	ba 0b       	sbc	r27, r26
     d02:	ee 1f       	adc	r30, r30
     d04:	88 f7       	brcc	.-30     	; 0xce8 <__divsf3_pse+0x94>
     d06:	e0 95       	com	r30
     d08:	08 95       	ret

00000d0a <__fixunssfsi>:
     d0a:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_splitA>
     d0e:	88 f0       	brcs	.+34     	; 0xd32 <__fixunssfsi+0x28>
     d10:	9f 57       	subi	r25, 0x7F	; 127
     d12:	98 f0       	brcs	.+38     	; 0xd3a <__fixunssfsi+0x30>
     d14:	b9 2f       	mov	r27, r25
     d16:	99 27       	eor	r25, r25
     d18:	b7 51       	subi	r27, 0x17	; 23
     d1a:	b0 f0       	brcs	.+44     	; 0xd48 <__fixunssfsi+0x3e>
     d1c:	e1 f0       	breq	.+56     	; 0xd56 <__fixunssfsi+0x4c>
     d1e:	66 0f       	add	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	88 1f       	adc	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	1a f0       	brmi	.+6      	; 0xd2e <__fixunssfsi+0x24>
     d28:	ba 95       	dec	r27
     d2a:	c9 f7       	brne	.-14     	; 0xd1e <__fixunssfsi+0x14>
     d2c:	14 c0       	rjmp	.+40     	; 0xd56 <__fixunssfsi+0x4c>
     d2e:	b1 30       	cpi	r27, 0x01	; 1
     d30:	91 f0       	breq	.+36     	; 0xd56 <__fixunssfsi+0x4c>
     d32:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_zero>
     d36:	b1 e0       	ldi	r27, 0x01	; 1
     d38:	08 95       	ret
     d3a:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_zero>
     d3e:	67 2f       	mov	r22, r23
     d40:	78 2f       	mov	r23, r24
     d42:	88 27       	eor	r24, r24
     d44:	b8 5f       	subi	r27, 0xF8	; 248
     d46:	39 f0       	breq	.+14     	; 0xd56 <__fixunssfsi+0x4c>
     d48:	b9 3f       	cpi	r27, 0xF9	; 249
     d4a:	cc f3       	brlt	.-14     	; 0xd3e <__fixunssfsi+0x34>
     d4c:	86 95       	lsr	r24
     d4e:	77 95       	ror	r23
     d50:	67 95       	ror	r22
     d52:	b3 95       	inc	r27
     d54:	d9 f7       	brne	.-10     	; 0xd4c <__fixunssfsi+0x42>
     d56:	3e f4       	brtc	.+14     	; 0xd66 <__fixunssfsi+0x5c>
     d58:	90 95       	com	r25
     d5a:	80 95       	com	r24
     d5c:	70 95       	com	r23
     d5e:	61 95       	neg	r22
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	8f 4f       	sbci	r24, 0xFF	; 255
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	08 95       	ret

00000d68 <__floatunsisf>:
     d68:	e8 94       	clt
     d6a:	09 c0       	rjmp	.+18     	; 0xd7e <__floatsisf+0x12>

00000d6c <__floatsisf>:
     d6c:	97 fb       	bst	r25, 7
     d6e:	3e f4       	brtc	.+14     	; 0xd7e <__floatsisf+0x12>
     d70:	90 95       	com	r25
     d72:	80 95       	com	r24
     d74:	70 95       	com	r23
     d76:	61 95       	neg	r22
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	8f 4f       	sbci	r24, 0xFF	; 255
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	99 23       	and	r25, r25
     d80:	a9 f0       	breq	.+42     	; 0xdac <__floatsisf+0x40>
     d82:	f9 2f       	mov	r31, r25
     d84:	96 e9       	ldi	r25, 0x96	; 150
     d86:	bb 27       	eor	r27, r27
     d88:	93 95       	inc	r25
     d8a:	f6 95       	lsr	r31
     d8c:	87 95       	ror	r24
     d8e:	77 95       	ror	r23
     d90:	67 95       	ror	r22
     d92:	b7 95       	ror	r27
     d94:	f1 11       	cpse	r31, r1
     d96:	f8 cf       	rjmp	.-16     	; 0xd88 <__floatsisf+0x1c>
     d98:	fa f4       	brpl	.+62     	; 0xdd8 <__floatsisf+0x6c>
     d9a:	bb 0f       	add	r27, r27
     d9c:	11 f4       	brne	.+4      	; 0xda2 <__floatsisf+0x36>
     d9e:	60 ff       	sbrs	r22, 0
     da0:	1b c0       	rjmp	.+54     	; 0xdd8 <__floatsisf+0x6c>
     da2:	6f 5f       	subi	r22, 0xFF	; 255
     da4:	7f 4f       	sbci	r23, 0xFF	; 255
     da6:	8f 4f       	sbci	r24, 0xFF	; 255
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	16 c0       	rjmp	.+44     	; 0xdd8 <__floatsisf+0x6c>
     dac:	88 23       	and	r24, r24
     dae:	11 f0       	breq	.+4      	; 0xdb4 <__floatsisf+0x48>
     db0:	96 e9       	ldi	r25, 0x96	; 150
     db2:	11 c0       	rjmp	.+34     	; 0xdd6 <__floatsisf+0x6a>
     db4:	77 23       	and	r23, r23
     db6:	21 f0       	breq	.+8      	; 0xdc0 <__floatsisf+0x54>
     db8:	9e e8       	ldi	r25, 0x8E	; 142
     dba:	87 2f       	mov	r24, r23
     dbc:	76 2f       	mov	r23, r22
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__floatsisf+0x5e>
     dc0:	66 23       	and	r22, r22
     dc2:	71 f0       	breq	.+28     	; 0xde0 <__floatsisf+0x74>
     dc4:	96 e8       	ldi	r25, 0x86	; 134
     dc6:	86 2f       	mov	r24, r22
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	2a f0       	brmi	.+10     	; 0xdd8 <__floatsisf+0x6c>
     dce:	9a 95       	dec	r25
     dd0:	66 0f       	add	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	88 1f       	adc	r24, r24
     dd6:	da f7       	brpl	.-10     	; 0xdce <__floatsisf+0x62>
     dd8:	88 0f       	add	r24, r24
     dda:	96 95       	lsr	r25
     ddc:	87 95       	ror	r24
     dde:	97 f9       	bld	r25, 7
     de0:	08 95       	ret

00000de2 <__fp_inf>:
     de2:	97 f9       	bld	r25, 7
     de4:	9f 67       	ori	r25, 0x7F	; 127
     de6:	80 e8       	ldi	r24, 0x80	; 128
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	08 95       	ret

00000dee <__fp_nan>:
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	80 ec       	ldi	r24, 0xC0	; 192
     df2:	08 95       	ret

00000df4 <__fp_pscA>:
     df4:	00 24       	eor	r0, r0
     df6:	0a 94       	dec	r0
     df8:	16 16       	cp	r1, r22
     dfa:	17 06       	cpc	r1, r23
     dfc:	18 06       	cpc	r1, r24
     dfe:	09 06       	cpc	r0, r25
     e00:	08 95       	ret

00000e02 <__fp_pscB>:
     e02:	00 24       	eor	r0, r0
     e04:	0a 94       	dec	r0
     e06:	12 16       	cp	r1, r18
     e08:	13 06       	cpc	r1, r19
     e0a:	14 06       	cpc	r1, r20
     e0c:	05 06       	cpc	r0, r21
     e0e:	08 95       	ret

00000e10 <__fp_round>:
     e10:	09 2e       	mov	r0, r25
     e12:	03 94       	inc	r0
     e14:	00 0c       	add	r0, r0
     e16:	11 f4       	brne	.+4      	; 0xe1c <__fp_round+0xc>
     e18:	88 23       	and	r24, r24
     e1a:	52 f0       	brmi	.+20     	; 0xe30 <__fp_round+0x20>
     e1c:	bb 0f       	add	r27, r27
     e1e:	40 f4       	brcc	.+16     	; 0xe30 <__fp_round+0x20>
     e20:	bf 2b       	or	r27, r31
     e22:	11 f4       	brne	.+4      	; 0xe28 <__fp_round+0x18>
     e24:	60 ff       	sbrs	r22, 0
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <__fp_round+0x20>
     e28:	6f 5f       	subi	r22, 0xFF	; 255
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	8f 4f       	sbci	r24, 0xFF	; 255
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	08 95       	ret

00000e32 <__fp_split3>:
     e32:	57 fd       	sbrc	r21, 7
     e34:	90 58       	subi	r25, 0x80	; 128
     e36:	44 0f       	add	r20, r20
     e38:	55 1f       	adc	r21, r21
     e3a:	59 f0       	breq	.+22     	; 0xe52 <__fp_splitA+0x10>
     e3c:	5f 3f       	cpi	r21, 0xFF	; 255
     e3e:	71 f0       	breq	.+28     	; 0xe5c <__fp_splitA+0x1a>
     e40:	47 95       	ror	r20

00000e42 <__fp_splitA>:
     e42:	88 0f       	add	r24, r24
     e44:	97 fb       	bst	r25, 7
     e46:	99 1f       	adc	r25, r25
     e48:	61 f0       	breq	.+24     	; 0xe62 <__fp_splitA+0x20>
     e4a:	9f 3f       	cpi	r25, 0xFF	; 255
     e4c:	79 f0       	breq	.+30     	; 0xe6c <__fp_splitA+0x2a>
     e4e:	87 95       	ror	r24
     e50:	08 95       	ret
     e52:	12 16       	cp	r1, r18
     e54:	13 06       	cpc	r1, r19
     e56:	14 06       	cpc	r1, r20
     e58:	55 1f       	adc	r21, r21
     e5a:	f2 cf       	rjmp	.-28     	; 0xe40 <__fp_split3+0xe>
     e5c:	46 95       	lsr	r20
     e5e:	f1 df       	rcall	.-30     	; 0xe42 <__fp_splitA>
     e60:	08 c0       	rjmp	.+16     	; 0xe72 <__fp_splitA+0x30>
     e62:	16 16       	cp	r1, r22
     e64:	17 06       	cpc	r1, r23
     e66:	18 06       	cpc	r1, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	f1 cf       	rjmp	.-30     	; 0xe4e <__fp_splitA+0xc>
     e6c:	86 95       	lsr	r24
     e6e:	71 05       	cpc	r23, r1
     e70:	61 05       	cpc	r22, r1
     e72:	08 94       	sec
     e74:	08 95       	ret

00000e76 <__fp_zero>:
     e76:	e8 94       	clt

00000e78 <__fp_szero>:
     e78:	bb 27       	eor	r27, r27
     e7a:	66 27       	eor	r22, r22
     e7c:	77 27       	eor	r23, r23
     e7e:	cb 01       	movw	r24, r22
     e80:	97 f9       	bld	r25, 7
     e82:	08 95       	ret

00000e84 <__mulsf3>:
     e84:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3x>
     e88:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_round>
     e8c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_pscA>
     e90:	38 f0       	brcs	.+14     	; 0xea0 <__mulsf3+0x1c>
     e92:	0e 94 01 07 	call	0xe02	; 0xe02 <__fp_pscB>
     e96:	20 f0       	brcs	.+8      	; 0xea0 <__mulsf3+0x1c>
     e98:	95 23       	and	r25, r21
     e9a:	11 f0       	breq	.+4      	; 0xea0 <__mulsf3+0x1c>
     e9c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_inf>
     ea0:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__fp_nan>
     ea4:	11 24       	eor	r1, r1
     ea6:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_szero>

00000eaa <__mulsf3x>:
     eaa:	0e 94 19 07 	call	0xe32	; 0xe32 <__fp_split3>
     eae:	70 f3       	brcs	.-36     	; 0xe8c <__mulsf3+0x8>

00000eb0 <__mulsf3_pse>:
     eb0:	95 9f       	mul	r25, r21
     eb2:	c1 f3       	breq	.-16     	; 0xea4 <__mulsf3+0x20>
     eb4:	95 0f       	add	r25, r21
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	55 1f       	adc	r21, r21
     eba:	62 9f       	mul	r22, r18
     ebc:	f0 01       	movw	r30, r0
     ebe:	72 9f       	mul	r23, r18
     ec0:	bb 27       	eor	r27, r27
     ec2:	f0 0d       	add	r31, r0
     ec4:	b1 1d       	adc	r27, r1
     ec6:	63 9f       	mul	r22, r19
     ec8:	aa 27       	eor	r26, r26
     eca:	f0 0d       	add	r31, r0
     ecc:	b1 1d       	adc	r27, r1
     ece:	aa 1f       	adc	r26, r26
     ed0:	64 9f       	mul	r22, r20
     ed2:	66 27       	eor	r22, r22
     ed4:	b0 0d       	add	r27, r0
     ed6:	a1 1d       	adc	r26, r1
     ed8:	66 1f       	adc	r22, r22
     eda:	82 9f       	mul	r24, r18
     edc:	22 27       	eor	r18, r18
     ede:	b0 0d       	add	r27, r0
     ee0:	a1 1d       	adc	r26, r1
     ee2:	62 1f       	adc	r22, r18
     ee4:	73 9f       	mul	r23, r19
     ee6:	b0 0d       	add	r27, r0
     ee8:	a1 1d       	adc	r26, r1
     eea:	62 1f       	adc	r22, r18
     eec:	83 9f       	mul	r24, r19
     eee:	a0 0d       	add	r26, r0
     ef0:	61 1d       	adc	r22, r1
     ef2:	22 1f       	adc	r18, r18
     ef4:	74 9f       	mul	r23, r20
     ef6:	33 27       	eor	r19, r19
     ef8:	a0 0d       	add	r26, r0
     efa:	61 1d       	adc	r22, r1
     efc:	23 1f       	adc	r18, r19
     efe:	84 9f       	mul	r24, r20
     f00:	60 0d       	add	r22, r0
     f02:	21 1d       	adc	r18, r1
     f04:	82 2f       	mov	r24, r18
     f06:	76 2f       	mov	r23, r22
     f08:	6a 2f       	mov	r22, r26
     f0a:	11 24       	eor	r1, r1
     f0c:	9f 57       	subi	r25, 0x7F	; 127
     f0e:	50 40       	sbci	r21, 0x00	; 0
     f10:	9a f0       	brmi	.+38     	; 0xf38 <__mulsf3_pse+0x88>
     f12:	f1 f0       	breq	.+60     	; 0xf50 <__mulsf3_pse+0xa0>
     f14:	88 23       	and	r24, r24
     f16:	4a f0       	brmi	.+18     	; 0xf2a <__mulsf3_pse+0x7a>
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	bb 1f       	adc	r27, r27
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	91 50       	subi	r25, 0x01	; 1
     f26:	50 40       	sbci	r21, 0x00	; 0
     f28:	a9 f7       	brne	.-22     	; 0xf14 <__mulsf3_pse+0x64>
     f2a:	9e 3f       	cpi	r25, 0xFE	; 254
     f2c:	51 05       	cpc	r21, r1
     f2e:	80 f0       	brcs	.+32     	; 0xf50 <__mulsf3_pse+0xa0>
     f30:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_inf>
     f34:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_szero>
     f38:	5f 3f       	cpi	r21, 0xFF	; 255
     f3a:	e4 f3       	brlt	.-8      	; 0xf34 <__mulsf3_pse+0x84>
     f3c:	98 3e       	cpi	r25, 0xE8	; 232
     f3e:	d4 f3       	brlt	.-12     	; 0xf34 <__mulsf3_pse+0x84>
     f40:	86 95       	lsr	r24
     f42:	77 95       	ror	r23
     f44:	67 95       	ror	r22
     f46:	b7 95       	ror	r27
     f48:	f7 95       	ror	r31
     f4a:	e7 95       	ror	r30
     f4c:	9f 5f       	subi	r25, 0xFF	; 255
     f4e:	c1 f7       	brne	.-16     	; 0xf40 <__mulsf3_pse+0x90>
     f50:	fe 2b       	or	r31, r30
     f52:	88 0f       	add	r24, r24
     f54:	91 1d       	adc	r25, r1
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	97 f9       	bld	r25, 7
     f5c:	08 95       	ret

00000f5e <__divmodhi4>:
     f5e:	97 fb       	bst	r25, 7
     f60:	07 2e       	mov	r0, r23
     f62:	16 f4       	brtc	.+4      	; 0xf68 <__divmodhi4+0xa>
     f64:	00 94       	com	r0
     f66:	07 d0       	rcall	.+14     	; 0xf76 <__divmodhi4_neg1>
     f68:	77 fd       	sbrc	r23, 7
     f6a:	09 d0       	rcall	.+18     	; 0xf7e <__divmodhi4_neg2>
     f6c:	0e 94 c3 07 	call	0xf86	; 0xf86 <__udivmodhi4>
     f70:	07 fc       	sbrc	r0, 7
     f72:	05 d0       	rcall	.+10     	; 0xf7e <__divmodhi4_neg2>
     f74:	3e f4       	brtc	.+14     	; 0xf84 <__divmodhi4_exit>

00000f76 <__divmodhi4_neg1>:
     f76:	90 95       	com	r25
     f78:	81 95       	neg	r24
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	08 95       	ret

00000f7e <__divmodhi4_neg2>:
     f7e:	70 95       	com	r23
     f80:	61 95       	neg	r22
     f82:	7f 4f       	sbci	r23, 0xFF	; 255

00000f84 <__divmodhi4_exit>:
     f84:	08 95       	ret

00000f86 <__udivmodhi4>:
     f86:	aa 1b       	sub	r26, r26
     f88:	bb 1b       	sub	r27, r27
     f8a:	51 e1       	ldi	r21, 0x11	; 17
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <__udivmodhi4_ep>

00000f8e <__udivmodhi4_loop>:
     f8e:	aa 1f       	adc	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	a6 17       	cp	r26, r22
     f94:	b7 07       	cpc	r27, r23
     f96:	10 f0       	brcs	.+4      	; 0xf9c <__udivmodhi4_ep>
     f98:	a6 1b       	sub	r26, r22
     f9a:	b7 0b       	sbc	r27, r23

00000f9c <__udivmodhi4_ep>:
     f9c:	88 1f       	adc	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	5a 95       	dec	r21
     fa2:	a9 f7       	brne	.-22     	; 0xf8e <__udivmodhi4_loop>
     fa4:	80 95       	com	r24
     fa6:	90 95       	com	r25
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	08 95       	ret

00000fae <printf>:
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ed ed       	ldi	r30, 0xDD	; 221
     fb4:	f7 e0       	ldi	r31, 0x07	; 7
     fb6:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__prologue_saves__+0x20>
     fba:	ae 01       	movw	r20, r28
     fbc:	4b 5f       	subi	r20, 0xFB	; 251
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	fa 01       	movw	r30, r20
     fc2:	61 91       	ld	r22, Z+
     fc4:	71 91       	ld	r23, Z+
     fc6:	af 01       	movw	r20, r30
     fc8:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <__iob+0x2>
     fcc:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <__iob+0x3>
     fd0:	0e 94 1d 08 	call	0x103a	; 0x103a <vfprintf>
     fd4:	e2 e0       	ldi	r30, 0x02	; 2
     fd6:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__epilogue_restores__+0x20>

00000fda <puts>:
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <__iob+0x2>
     fe6:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <__iob+0x3>
     fea:	23 81       	ldd	r18, Z+3	; 0x03
     fec:	21 ff       	sbrs	r18, 1
     fee:	1b c0       	rjmp	.+54     	; 0x1026 <puts+0x4c>
     ff0:	8c 01       	movw	r16, r24
     ff2:	d0 e0       	ldi	r29, 0x00	; 0
     ff4:	c0 e0       	ldi	r28, 0x00	; 0
     ff6:	f8 01       	movw	r30, r16
     ff8:	81 91       	ld	r24, Z+
     ffa:	8f 01       	movw	r16, r30
     ffc:	60 91 a2 03 	lds	r22, 0x03A2	; 0x8003a2 <__iob+0x2>
    1000:	70 91 a3 03 	lds	r23, 0x03A3	; 0x8003a3 <__iob+0x3>
    1004:	db 01       	movw	r26, r22
    1006:	18 96       	adiw	r26, 0x08	; 8
    1008:	ed 91       	ld	r30, X+
    100a:	fc 91       	ld	r31, X
    100c:	19 97       	sbiw	r26, 0x09	; 9
    100e:	88 23       	and	r24, r24
    1010:	31 f0       	breq	.+12     	; 0x101e <puts+0x44>
    1012:	09 95       	icall
    1014:	89 2b       	or	r24, r25
    1016:	79 f3       	breq	.-34     	; 0xff6 <puts+0x1c>
    1018:	df ef       	ldi	r29, 0xFF	; 255
    101a:	cf ef       	ldi	r28, 0xFF	; 255
    101c:	ec cf       	rjmp	.-40     	; 0xff6 <puts+0x1c>
    101e:	8a e0       	ldi	r24, 0x0A	; 10
    1020:	09 95       	icall
    1022:	89 2b       	or	r24, r25
    1024:	19 f0       	breq	.+6      	; 0x102c <puts+0x52>
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	9f ef       	ldi	r25, 0xFF	; 255
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <puts+0x56>
    102c:	8d 2f       	mov	r24, r29
    102e:	9c 2f       	mov	r25, r28
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	08 95       	ret

0000103a <vfprintf>:
    103a:	ab e0       	ldi	r26, 0x0B	; 11
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e3 e2       	ldi	r30, 0x23	; 35
    1040:	f8 e0       	ldi	r31, 0x08	; 8
    1042:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__prologue_saves__>
    1046:	6c 01       	movw	r12, r24
    1048:	7b 01       	movw	r14, r22
    104a:	8a 01       	movw	r16, r20
    104c:	fc 01       	movw	r30, r24
    104e:	17 82       	std	Z+7, r1	; 0x07
    1050:	16 82       	std	Z+6, r1	; 0x06
    1052:	83 81       	ldd	r24, Z+3	; 0x03
    1054:	81 ff       	sbrs	r24, 1
    1056:	cc c1       	rjmp	.+920    	; 0x13f0 <vfprintf+0x3b6>
    1058:	ce 01       	movw	r24, r28
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	3c 01       	movw	r6, r24
    105e:	f6 01       	movw	r30, r12
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	f7 01       	movw	r30, r14
    1064:	93 fd       	sbrc	r25, 3
    1066:	85 91       	lpm	r24, Z+
    1068:	93 ff       	sbrs	r25, 3
    106a:	81 91       	ld	r24, Z+
    106c:	7f 01       	movw	r14, r30
    106e:	88 23       	and	r24, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <vfprintf+0x3a>
    1072:	ba c1       	rjmp	.+884    	; 0x13e8 <vfprintf+0x3ae>
    1074:	85 32       	cpi	r24, 0x25	; 37
    1076:	39 f4       	brne	.+14     	; 0x1086 <vfprintf+0x4c>
    1078:	93 fd       	sbrc	r25, 3
    107a:	85 91       	lpm	r24, Z+
    107c:	93 ff       	sbrs	r25, 3
    107e:	81 91       	ld	r24, Z+
    1080:	7f 01       	movw	r14, r30
    1082:	85 32       	cpi	r24, 0x25	; 37
    1084:	29 f4       	brne	.+10     	; 0x1090 <vfprintf+0x56>
    1086:	b6 01       	movw	r22, r12
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    108e:	e7 cf       	rjmp	.-50     	; 0x105e <vfprintf+0x24>
    1090:	91 2c       	mov	r9, r1
    1092:	21 2c       	mov	r2, r1
    1094:	31 2c       	mov	r3, r1
    1096:	ff e1       	ldi	r31, 0x1F	; 31
    1098:	f3 15       	cp	r31, r3
    109a:	d8 f0       	brcs	.+54     	; 0x10d2 <vfprintf+0x98>
    109c:	8b 32       	cpi	r24, 0x2B	; 43
    109e:	79 f0       	breq	.+30     	; 0x10be <vfprintf+0x84>
    10a0:	38 f4       	brcc	.+14     	; 0x10b0 <vfprintf+0x76>
    10a2:	80 32       	cpi	r24, 0x20	; 32
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <vfprintf+0x8a>
    10a6:	83 32       	cpi	r24, 0x23	; 35
    10a8:	a1 f4       	brne	.+40     	; 0x10d2 <vfprintf+0x98>
    10aa:	23 2d       	mov	r18, r3
    10ac:	20 61       	ori	r18, 0x10	; 16
    10ae:	1d c0       	rjmp	.+58     	; 0x10ea <vfprintf+0xb0>
    10b0:	8d 32       	cpi	r24, 0x2D	; 45
    10b2:	61 f0       	breq	.+24     	; 0x10cc <vfprintf+0x92>
    10b4:	80 33       	cpi	r24, 0x30	; 48
    10b6:	69 f4       	brne	.+26     	; 0x10d2 <vfprintf+0x98>
    10b8:	23 2d       	mov	r18, r3
    10ba:	21 60       	ori	r18, 0x01	; 1
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <vfprintf+0xb0>
    10be:	83 2d       	mov	r24, r3
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	38 2e       	mov	r3, r24
    10c4:	e3 2d       	mov	r30, r3
    10c6:	e4 60       	ori	r30, 0x04	; 4
    10c8:	3e 2e       	mov	r3, r30
    10ca:	2a c0       	rjmp	.+84     	; 0x1120 <vfprintf+0xe6>
    10cc:	f3 2d       	mov	r31, r3
    10ce:	f8 60       	ori	r31, 0x08	; 8
    10d0:	1d c0       	rjmp	.+58     	; 0x110c <vfprintf+0xd2>
    10d2:	37 fc       	sbrc	r3, 7
    10d4:	2d c0       	rjmp	.+90     	; 0x1130 <vfprintf+0xf6>
    10d6:	20 ed       	ldi	r18, 0xD0	; 208
    10d8:	28 0f       	add	r18, r24
    10da:	2a 30       	cpi	r18, 0x0A	; 10
    10dc:	40 f0       	brcs	.+16     	; 0x10ee <vfprintf+0xb4>
    10de:	8e 32       	cpi	r24, 0x2E	; 46
    10e0:	b9 f4       	brne	.+46     	; 0x1110 <vfprintf+0xd6>
    10e2:	36 fc       	sbrc	r3, 6
    10e4:	81 c1       	rjmp	.+770    	; 0x13e8 <vfprintf+0x3ae>
    10e6:	23 2d       	mov	r18, r3
    10e8:	20 64       	ori	r18, 0x40	; 64
    10ea:	32 2e       	mov	r3, r18
    10ec:	19 c0       	rjmp	.+50     	; 0x1120 <vfprintf+0xe6>
    10ee:	36 fe       	sbrs	r3, 6
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <vfprintf+0xc4>
    10f2:	8a e0       	ldi	r24, 0x0A	; 10
    10f4:	98 9e       	mul	r9, r24
    10f6:	20 0d       	add	r18, r0
    10f8:	11 24       	eor	r1, r1
    10fa:	92 2e       	mov	r9, r18
    10fc:	11 c0       	rjmp	.+34     	; 0x1120 <vfprintf+0xe6>
    10fe:	ea e0       	ldi	r30, 0x0A	; 10
    1100:	2e 9e       	mul	r2, r30
    1102:	20 0d       	add	r18, r0
    1104:	11 24       	eor	r1, r1
    1106:	22 2e       	mov	r2, r18
    1108:	f3 2d       	mov	r31, r3
    110a:	f0 62       	ori	r31, 0x20	; 32
    110c:	3f 2e       	mov	r3, r31
    110e:	08 c0       	rjmp	.+16     	; 0x1120 <vfprintf+0xe6>
    1110:	8c 36       	cpi	r24, 0x6C	; 108
    1112:	21 f4       	brne	.+8      	; 0x111c <vfprintf+0xe2>
    1114:	83 2d       	mov	r24, r3
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	38 2e       	mov	r3, r24
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <vfprintf+0xe6>
    111c:	88 36       	cpi	r24, 0x68	; 104
    111e:	41 f4       	brne	.+16     	; 0x1130 <vfprintf+0xf6>
    1120:	f7 01       	movw	r30, r14
    1122:	93 fd       	sbrc	r25, 3
    1124:	85 91       	lpm	r24, Z+
    1126:	93 ff       	sbrs	r25, 3
    1128:	81 91       	ld	r24, Z+
    112a:	7f 01       	movw	r14, r30
    112c:	81 11       	cpse	r24, r1
    112e:	b3 cf       	rjmp	.-154    	; 0x1096 <vfprintf+0x5c>
    1130:	98 2f       	mov	r25, r24
    1132:	9f 7d       	andi	r25, 0xDF	; 223
    1134:	95 54       	subi	r25, 0x45	; 69
    1136:	93 30       	cpi	r25, 0x03	; 3
    1138:	28 f4       	brcc	.+10     	; 0x1144 <vfprintf+0x10a>
    113a:	0c 5f       	subi	r16, 0xFC	; 252
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	9f e3       	ldi	r25, 0x3F	; 63
    1140:	99 83       	std	Y+1, r25	; 0x01
    1142:	0d c0       	rjmp	.+26     	; 0x115e <vfprintf+0x124>
    1144:	83 36       	cpi	r24, 0x63	; 99
    1146:	31 f0       	breq	.+12     	; 0x1154 <vfprintf+0x11a>
    1148:	83 37       	cpi	r24, 0x73	; 115
    114a:	71 f0       	breq	.+28     	; 0x1168 <vfprintf+0x12e>
    114c:	83 35       	cpi	r24, 0x53	; 83
    114e:	09 f0       	breq	.+2      	; 0x1152 <vfprintf+0x118>
    1150:	59 c0       	rjmp	.+178    	; 0x1204 <vfprintf+0x1ca>
    1152:	21 c0       	rjmp	.+66     	; 0x1196 <vfprintf+0x15c>
    1154:	f8 01       	movw	r30, r16
    1156:	80 81       	ld	r24, Z
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	0e 5f       	subi	r16, 0xFE	; 254
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	88 24       	eor	r8, r8
    1160:	83 94       	inc	r8
    1162:	91 2c       	mov	r9, r1
    1164:	53 01       	movw	r10, r6
    1166:	13 c0       	rjmp	.+38     	; 0x118e <vfprintf+0x154>
    1168:	28 01       	movw	r4, r16
    116a:	f2 e0       	ldi	r31, 0x02	; 2
    116c:	4f 0e       	add	r4, r31
    116e:	51 1c       	adc	r5, r1
    1170:	f8 01       	movw	r30, r16
    1172:	a0 80       	ld	r10, Z
    1174:	b1 80       	ldd	r11, Z+1	; 0x01
    1176:	36 fe       	sbrs	r3, 6
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <vfprintf+0x146>
    117a:	69 2d       	mov	r22, r9
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <vfprintf+0x14a>
    1180:	6f ef       	ldi	r22, 0xFF	; 255
    1182:	7f ef       	ldi	r23, 0xFF	; 255
    1184:	c5 01       	movw	r24, r10
    1186:	0e 94 09 0a 	call	0x1412	; 0x1412 <strnlen>
    118a:	4c 01       	movw	r8, r24
    118c:	82 01       	movw	r16, r4
    118e:	f3 2d       	mov	r31, r3
    1190:	ff 77       	andi	r31, 0x7F	; 127
    1192:	3f 2e       	mov	r3, r31
    1194:	16 c0       	rjmp	.+44     	; 0x11c2 <vfprintf+0x188>
    1196:	28 01       	movw	r4, r16
    1198:	22 e0       	ldi	r18, 0x02	; 2
    119a:	42 0e       	add	r4, r18
    119c:	51 1c       	adc	r5, r1
    119e:	f8 01       	movw	r30, r16
    11a0:	a0 80       	ld	r10, Z
    11a2:	b1 80       	ldd	r11, Z+1	; 0x01
    11a4:	36 fe       	sbrs	r3, 6
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <vfprintf+0x174>
    11a8:	69 2d       	mov	r22, r9
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <vfprintf+0x178>
    11ae:	6f ef       	ldi	r22, 0xFF	; 255
    11b0:	7f ef       	ldi	r23, 0xFF	; 255
    11b2:	c5 01       	movw	r24, r10
    11b4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <strnlen_P>
    11b8:	4c 01       	movw	r8, r24
    11ba:	f3 2d       	mov	r31, r3
    11bc:	f0 68       	ori	r31, 0x80	; 128
    11be:	3f 2e       	mov	r3, r31
    11c0:	82 01       	movw	r16, r4
    11c2:	33 fc       	sbrc	r3, 3
    11c4:	1b c0       	rjmp	.+54     	; 0x11fc <vfprintf+0x1c2>
    11c6:	82 2d       	mov	r24, r2
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	88 16       	cp	r8, r24
    11cc:	99 06       	cpc	r9, r25
    11ce:	b0 f4       	brcc	.+44     	; 0x11fc <vfprintf+0x1c2>
    11d0:	b6 01       	movw	r22, r12
    11d2:	80 e2       	ldi	r24, 0x20	; 32
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    11da:	2a 94       	dec	r2
    11dc:	f4 cf       	rjmp	.-24     	; 0x11c6 <vfprintf+0x18c>
    11de:	f5 01       	movw	r30, r10
    11e0:	37 fc       	sbrc	r3, 7
    11e2:	85 91       	lpm	r24, Z+
    11e4:	37 fe       	sbrs	r3, 7
    11e6:	81 91       	ld	r24, Z+
    11e8:	5f 01       	movw	r10, r30
    11ea:	b6 01       	movw	r22, r12
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    11f2:	21 10       	cpse	r2, r1
    11f4:	2a 94       	dec	r2
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	82 1a       	sub	r8, r18
    11fa:	91 08       	sbc	r9, r1
    11fc:	81 14       	cp	r8, r1
    11fe:	91 04       	cpc	r9, r1
    1200:	71 f7       	brne	.-36     	; 0x11de <vfprintf+0x1a4>
    1202:	e8 c0       	rjmp	.+464    	; 0x13d4 <vfprintf+0x39a>
    1204:	84 36       	cpi	r24, 0x64	; 100
    1206:	11 f0       	breq	.+4      	; 0x120c <vfprintf+0x1d2>
    1208:	89 36       	cpi	r24, 0x69	; 105
    120a:	41 f5       	brne	.+80     	; 0x125c <vfprintf+0x222>
    120c:	f8 01       	movw	r30, r16
    120e:	37 fe       	sbrs	r3, 7
    1210:	07 c0       	rjmp	.+14     	; 0x1220 <vfprintf+0x1e6>
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	0c 5f       	subi	r16, 0xFC	; 252
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <vfprintf+0x1f6>
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	07 2e       	mov	r0, r23
    1226:	00 0c       	add	r0, r0
    1228:	88 0b       	sbc	r24, r24
    122a:	99 0b       	sbc	r25, r25
    122c:	0e 5f       	subi	r16, 0xFE	; 254
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	f3 2d       	mov	r31, r3
    1232:	ff 76       	andi	r31, 0x6F	; 111
    1234:	3f 2e       	mov	r3, r31
    1236:	97 ff       	sbrs	r25, 7
    1238:	09 c0       	rjmp	.+18     	; 0x124c <vfprintf+0x212>
    123a:	90 95       	com	r25
    123c:	80 95       	com	r24
    123e:	70 95       	com	r23
    1240:	61 95       	neg	r22
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	8f 4f       	sbci	r24, 0xFF	; 255
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	f0 68       	ori	r31, 0x80	; 128
    124a:	3f 2e       	mov	r3, r31
    124c:	2a e0       	ldi	r18, 0x0A	; 10
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	a3 01       	movw	r20, r6
    1252:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__ultoa_invert>
    1256:	88 2e       	mov	r8, r24
    1258:	86 18       	sub	r8, r6
    125a:	45 c0       	rjmp	.+138    	; 0x12e6 <vfprintf+0x2ac>
    125c:	85 37       	cpi	r24, 0x75	; 117
    125e:	31 f4       	brne	.+12     	; 0x126c <vfprintf+0x232>
    1260:	23 2d       	mov	r18, r3
    1262:	2f 7e       	andi	r18, 0xEF	; 239
    1264:	b2 2e       	mov	r11, r18
    1266:	2a e0       	ldi	r18, 0x0A	; 10
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	25 c0       	rjmp	.+74     	; 0x12b6 <vfprintf+0x27c>
    126c:	93 2d       	mov	r25, r3
    126e:	99 7f       	andi	r25, 0xF9	; 249
    1270:	b9 2e       	mov	r11, r25
    1272:	8f 36       	cpi	r24, 0x6F	; 111
    1274:	c1 f0       	breq	.+48     	; 0x12a6 <vfprintf+0x26c>
    1276:	18 f4       	brcc	.+6      	; 0x127e <vfprintf+0x244>
    1278:	88 35       	cpi	r24, 0x58	; 88
    127a:	79 f0       	breq	.+30     	; 0x129a <vfprintf+0x260>
    127c:	b5 c0       	rjmp	.+362    	; 0x13e8 <vfprintf+0x3ae>
    127e:	80 37       	cpi	r24, 0x70	; 112
    1280:	19 f0       	breq	.+6      	; 0x1288 <vfprintf+0x24e>
    1282:	88 37       	cpi	r24, 0x78	; 120
    1284:	21 f0       	breq	.+8      	; 0x128e <vfprintf+0x254>
    1286:	b0 c0       	rjmp	.+352    	; 0x13e8 <vfprintf+0x3ae>
    1288:	e9 2f       	mov	r30, r25
    128a:	e0 61       	ori	r30, 0x10	; 16
    128c:	be 2e       	mov	r11, r30
    128e:	b4 fe       	sbrs	r11, 4
    1290:	0d c0       	rjmp	.+26     	; 0x12ac <vfprintf+0x272>
    1292:	fb 2d       	mov	r31, r11
    1294:	f4 60       	ori	r31, 0x04	; 4
    1296:	bf 2e       	mov	r11, r31
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <vfprintf+0x272>
    129a:	34 fe       	sbrs	r3, 4
    129c:	0a c0       	rjmp	.+20     	; 0x12b2 <vfprintf+0x278>
    129e:	29 2f       	mov	r18, r25
    12a0:	26 60       	ori	r18, 0x06	; 6
    12a2:	b2 2e       	mov	r11, r18
    12a4:	06 c0       	rjmp	.+12     	; 0x12b2 <vfprintf+0x278>
    12a6:	28 e0       	ldi	r18, 0x08	; 8
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <vfprintf+0x27c>
    12ac:	20 e1       	ldi	r18, 0x10	; 16
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <vfprintf+0x27c>
    12b2:	20 e1       	ldi	r18, 0x10	; 16
    12b4:	32 e0       	ldi	r19, 0x02	; 2
    12b6:	f8 01       	movw	r30, r16
    12b8:	b7 fe       	sbrs	r11, 7
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <vfprintf+0x290>
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	0c 5f       	subi	r16, 0xFC	; 252
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	06 c0       	rjmp	.+12     	; 0x12d6 <vfprintf+0x29c>
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 5f       	subi	r16, 0xFE	; 254
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	a3 01       	movw	r20, r6
    12d8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__ultoa_invert>
    12dc:	88 2e       	mov	r8, r24
    12de:	86 18       	sub	r8, r6
    12e0:	fb 2d       	mov	r31, r11
    12e2:	ff 77       	andi	r31, 0x7F	; 127
    12e4:	3f 2e       	mov	r3, r31
    12e6:	36 fe       	sbrs	r3, 6
    12e8:	0d c0       	rjmp	.+26     	; 0x1304 <vfprintf+0x2ca>
    12ea:	23 2d       	mov	r18, r3
    12ec:	2e 7f       	andi	r18, 0xFE	; 254
    12ee:	a2 2e       	mov	r10, r18
    12f0:	89 14       	cp	r8, r9
    12f2:	58 f4       	brcc	.+22     	; 0x130a <vfprintf+0x2d0>
    12f4:	34 fe       	sbrs	r3, 4
    12f6:	0b c0       	rjmp	.+22     	; 0x130e <vfprintf+0x2d4>
    12f8:	32 fc       	sbrc	r3, 2
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <vfprintf+0x2d4>
    12fc:	83 2d       	mov	r24, r3
    12fe:	8e 7e       	andi	r24, 0xEE	; 238
    1300:	a8 2e       	mov	r10, r24
    1302:	05 c0       	rjmp	.+10     	; 0x130e <vfprintf+0x2d4>
    1304:	b8 2c       	mov	r11, r8
    1306:	a3 2c       	mov	r10, r3
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <vfprintf+0x2d6>
    130a:	b8 2c       	mov	r11, r8
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <vfprintf+0x2d6>
    130e:	b9 2c       	mov	r11, r9
    1310:	a4 fe       	sbrs	r10, 4
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <vfprintf+0x2f8>
    1314:	fe 01       	movw	r30, r28
    1316:	e8 0d       	add	r30, r8
    1318:	f1 1d       	adc	r31, r1
    131a:	80 81       	ld	r24, Z
    131c:	80 33       	cpi	r24, 0x30	; 48
    131e:	21 f4       	brne	.+8      	; 0x1328 <vfprintf+0x2ee>
    1320:	9a 2d       	mov	r25, r10
    1322:	99 7e       	andi	r25, 0xE9	; 233
    1324:	a9 2e       	mov	r10, r25
    1326:	09 c0       	rjmp	.+18     	; 0x133a <vfprintf+0x300>
    1328:	a2 fe       	sbrs	r10, 2
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <vfprintf+0x2fe>
    132c:	b3 94       	inc	r11
    132e:	b3 94       	inc	r11
    1330:	04 c0       	rjmp	.+8      	; 0x133a <vfprintf+0x300>
    1332:	8a 2d       	mov	r24, r10
    1334:	86 78       	andi	r24, 0x86	; 134
    1336:	09 f0       	breq	.+2      	; 0x133a <vfprintf+0x300>
    1338:	b3 94       	inc	r11
    133a:	a3 fc       	sbrc	r10, 3
    133c:	11 c0       	rjmp	.+34     	; 0x1360 <vfprintf+0x326>
    133e:	a0 fe       	sbrs	r10, 0
    1340:	06 c0       	rjmp	.+12     	; 0x134e <vfprintf+0x314>
    1342:	b2 14       	cp	r11, r2
    1344:	88 f4       	brcc	.+34     	; 0x1368 <vfprintf+0x32e>
    1346:	28 0c       	add	r2, r8
    1348:	92 2c       	mov	r9, r2
    134a:	9b 18       	sub	r9, r11
    134c:	0e c0       	rjmp	.+28     	; 0x136a <vfprintf+0x330>
    134e:	b2 14       	cp	r11, r2
    1350:	60 f4       	brcc	.+24     	; 0x136a <vfprintf+0x330>
    1352:	b6 01       	movw	r22, r12
    1354:	80 e2       	ldi	r24, 0x20	; 32
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    135c:	b3 94       	inc	r11
    135e:	f7 cf       	rjmp	.-18     	; 0x134e <vfprintf+0x314>
    1360:	b2 14       	cp	r11, r2
    1362:	18 f4       	brcc	.+6      	; 0x136a <vfprintf+0x330>
    1364:	2b 18       	sub	r2, r11
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x332>
    1368:	98 2c       	mov	r9, r8
    136a:	21 2c       	mov	r2, r1
    136c:	a4 fe       	sbrs	r10, 4
    136e:	10 c0       	rjmp	.+32     	; 0x1390 <vfprintf+0x356>
    1370:	b6 01       	movw	r22, r12
    1372:	80 e3       	ldi	r24, 0x30	; 48
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    137a:	a2 fe       	sbrs	r10, 2
    137c:	17 c0       	rjmp	.+46     	; 0x13ac <vfprintf+0x372>
    137e:	a1 fc       	sbrc	r10, 1
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <vfprintf+0x34e>
    1382:	88 e7       	ldi	r24, 0x78	; 120
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x352>
    1388:	88 e5       	ldi	r24, 0x58	; 88
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	b6 01       	movw	r22, r12
    138e:	0c c0       	rjmp	.+24     	; 0x13a8 <vfprintf+0x36e>
    1390:	8a 2d       	mov	r24, r10
    1392:	86 78       	andi	r24, 0x86	; 134
    1394:	59 f0       	breq	.+22     	; 0x13ac <vfprintf+0x372>
    1396:	a1 fe       	sbrs	r10, 1
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0x364>
    139a:	8b e2       	ldi	r24, 0x2B	; 43
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <vfprintf+0x366>
    139e:	80 e2       	ldi	r24, 0x20	; 32
    13a0:	a7 fc       	sbrc	r10, 7
    13a2:	8d e2       	ldi	r24, 0x2D	; 45
    13a4:	b6 01       	movw	r22, r12
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    13ac:	89 14       	cp	r8, r9
    13ae:	38 f4       	brcc	.+14     	; 0x13be <vfprintf+0x384>
    13b0:	b6 01       	movw	r22, r12
    13b2:	80 e3       	ldi	r24, 0x30	; 48
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    13ba:	9a 94       	dec	r9
    13bc:	f7 cf       	rjmp	.-18     	; 0x13ac <vfprintf+0x372>
    13be:	8a 94       	dec	r8
    13c0:	f3 01       	movw	r30, r6
    13c2:	e8 0d       	add	r30, r8
    13c4:	f1 1d       	adc	r31, r1
    13c6:	80 81       	ld	r24, Z
    13c8:	b6 01       	movw	r22, r12
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    13d0:	81 10       	cpse	r8, r1
    13d2:	f5 cf       	rjmp	.-22     	; 0x13be <vfprintf+0x384>
    13d4:	22 20       	and	r2, r2
    13d6:	09 f4       	brne	.+2      	; 0x13da <vfprintf+0x3a0>
    13d8:	42 ce       	rjmp	.-892    	; 0x105e <vfprintf+0x24>
    13da:	b6 01       	movw	r22, r12
    13dc:	80 e2       	ldi	r24, 0x20	; 32
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 14 0a 	call	0x1428	; 0x1428 <fputc>
    13e4:	2a 94       	dec	r2
    13e6:	f6 cf       	rjmp	.-20     	; 0x13d4 <vfprintf+0x39a>
    13e8:	f6 01       	movw	r30, r12
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	97 81       	ldd	r25, Z+7	; 0x07
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x3ba>
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	2b 96       	adiw	r28, 0x0b	; 11
    13f6:	e2 e1       	ldi	r30, 0x12	; 18
    13f8:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__epilogue_restores__>

000013fc <strnlen_P>:
    13fc:	fc 01       	movw	r30, r24
    13fe:	05 90       	lpm	r0, Z+
    1400:	61 50       	subi	r22, 0x01	; 1
    1402:	70 40       	sbci	r23, 0x00	; 0
    1404:	01 10       	cpse	r0, r1
    1406:	d8 f7       	brcc	.-10     	; 0x13fe <strnlen_P+0x2>
    1408:	80 95       	com	r24
    140a:	90 95       	com	r25
    140c:	8e 0f       	add	r24, r30
    140e:	9f 1f       	adc	r25, r31
    1410:	08 95       	ret

00001412 <strnlen>:
    1412:	fc 01       	movw	r30, r24
    1414:	61 50       	subi	r22, 0x01	; 1
    1416:	70 40       	sbci	r23, 0x00	; 0
    1418:	01 90       	ld	r0, Z+
    141a:	01 10       	cpse	r0, r1
    141c:	d8 f7       	brcc	.-10     	; 0x1414 <strnlen+0x2>
    141e:	80 95       	com	r24
    1420:	90 95       	com	r25
    1422:	8e 0f       	add	r24, r30
    1424:	9f 1f       	adc	r25, r31
    1426:	08 95       	ret

00001428 <fputc>:
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	fb 01       	movw	r30, r22
    1432:	23 81       	ldd	r18, Z+3	; 0x03
    1434:	21 fd       	sbrc	r18, 1
    1436:	03 c0       	rjmp	.+6      	; 0x143e <fputc+0x16>
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	9f ef       	ldi	r25, 0xFF	; 255
    143c:	2c c0       	rjmp	.+88     	; 0x1496 <fputc+0x6e>
    143e:	22 ff       	sbrs	r18, 2
    1440:	16 c0       	rjmp	.+44     	; 0x146e <fputc+0x46>
    1442:	46 81       	ldd	r20, Z+6	; 0x06
    1444:	57 81       	ldd	r21, Z+7	; 0x07
    1446:	24 81       	ldd	r18, Z+4	; 0x04
    1448:	35 81       	ldd	r19, Z+5	; 0x05
    144a:	42 17       	cp	r20, r18
    144c:	53 07       	cpc	r21, r19
    144e:	44 f4       	brge	.+16     	; 0x1460 <fputc+0x38>
    1450:	a0 81       	ld	r26, Z
    1452:	b1 81       	ldd	r27, Z+1	; 0x01
    1454:	9d 01       	movw	r18, r26
    1456:	2f 5f       	subi	r18, 0xFF	; 255
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	31 83       	std	Z+1, r19	; 0x01
    145c:	20 83       	st	Z, r18
    145e:	8c 93       	st	X, r24
    1460:	26 81       	ldd	r18, Z+6	; 0x06
    1462:	37 81       	ldd	r19, Z+7	; 0x07
    1464:	2f 5f       	subi	r18, 0xFF	; 255
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
    1468:	37 83       	std	Z+7, r19	; 0x07
    146a:	26 83       	std	Z+6, r18	; 0x06
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <fputc+0x6e>
    146e:	8b 01       	movw	r16, r22
    1470:	ec 01       	movw	r28, r24
    1472:	fb 01       	movw	r30, r22
    1474:	00 84       	ldd	r0, Z+8	; 0x08
    1476:	f1 85       	ldd	r31, Z+9	; 0x09
    1478:	e0 2d       	mov	r30, r0
    147a:	09 95       	icall
    147c:	89 2b       	or	r24, r25
    147e:	e1 f6       	brne	.-72     	; 0x1438 <fputc+0x10>
    1480:	d8 01       	movw	r26, r16
    1482:	16 96       	adiw	r26, 0x06	; 6
    1484:	8d 91       	ld	r24, X+
    1486:	9c 91       	ld	r25, X
    1488:	17 97       	sbiw	r26, 0x07	; 7
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	17 96       	adiw	r26, 0x07	; 7
    148e:	9c 93       	st	X, r25
    1490:	8e 93       	st	-X, r24
    1492:	16 97       	sbiw	r26, 0x06	; 6
    1494:	ce 01       	movw	r24, r28
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <__ultoa_invert>:
    14a0:	fa 01       	movw	r30, r20
    14a2:	aa 27       	eor	r26, r26
    14a4:	28 30       	cpi	r18, 0x08	; 8
    14a6:	51 f1       	breq	.+84     	; 0x14fc <__ultoa_invert+0x5c>
    14a8:	20 31       	cpi	r18, 0x10	; 16
    14aa:	81 f1       	breq	.+96     	; 0x150c <__ultoa_invert+0x6c>
    14ac:	e8 94       	clt
    14ae:	6f 93       	push	r22
    14b0:	6e 7f       	andi	r22, 0xFE	; 254
    14b2:	6e 5f       	subi	r22, 0xFE	; 254
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	8f 4f       	sbci	r24, 0xFF	; 255
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	af 4f       	sbci	r26, 0xFF	; 255
    14bc:	b1 e0       	ldi	r27, 0x01	; 1
    14be:	3e d0       	rcall	.+124    	; 0x153c <__ultoa_invert+0x9c>
    14c0:	b4 e0       	ldi	r27, 0x04	; 4
    14c2:	3c d0       	rcall	.+120    	; 0x153c <__ultoa_invert+0x9c>
    14c4:	67 0f       	add	r22, r23
    14c6:	78 1f       	adc	r23, r24
    14c8:	89 1f       	adc	r24, r25
    14ca:	9a 1f       	adc	r25, r26
    14cc:	a1 1d       	adc	r26, r1
    14ce:	68 0f       	add	r22, r24
    14d0:	79 1f       	adc	r23, r25
    14d2:	8a 1f       	adc	r24, r26
    14d4:	91 1d       	adc	r25, r1
    14d6:	a1 1d       	adc	r26, r1
    14d8:	6a 0f       	add	r22, r26
    14da:	71 1d       	adc	r23, r1
    14dc:	81 1d       	adc	r24, r1
    14de:	91 1d       	adc	r25, r1
    14e0:	a1 1d       	adc	r26, r1
    14e2:	20 d0       	rcall	.+64     	; 0x1524 <__ultoa_invert+0x84>
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <__ultoa_invert+0x48>
    14e6:	68 94       	set
    14e8:	3f 91       	pop	r19
    14ea:	2a e0       	ldi	r18, 0x0A	; 10
    14ec:	26 9f       	mul	r18, r22
    14ee:	11 24       	eor	r1, r1
    14f0:	30 19       	sub	r19, r0
    14f2:	30 5d       	subi	r19, 0xD0	; 208
    14f4:	31 93       	st	Z+, r19
    14f6:	de f6       	brtc	.-74     	; 0x14ae <__ultoa_invert+0xe>
    14f8:	cf 01       	movw	r24, r30
    14fa:	08 95       	ret
    14fc:	46 2f       	mov	r20, r22
    14fe:	47 70       	andi	r20, 0x07	; 7
    1500:	40 5d       	subi	r20, 0xD0	; 208
    1502:	41 93       	st	Z+, r20
    1504:	b3 e0       	ldi	r27, 0x03	; 3
    1506:	0f d0       	rcall	.+30     	; 0x1526 <__ultoa_invert+0x86>
    1508:	c9 f7       	brne	.-14     	; 0x14fc <__ultoa_invert+0x5c>
    150a:	f6 cf       	rjmp	.-20     	; 0x14f8 <__ultoa_invert+0x58>
    150c:	46 2f       	mov	r20, r22
    150e:	4f 70       	andi	r20, 0x0F	; 15
    1510:	40 5d       	subi	r20, 0xD0	; 208
    1512:	4a 33       	cpi	r20, 0x3A	; 58
    1514:	18 f0       	brcs	.+6      	; 0x151c <__ultoa_invert+0x7c>
    1516:	49 5d       	subi	r20, 0xD9	; 217
    1518:	31 fd       	sbrc	r19, 1
    151a:	40 52       	subi	r20, 0x20	; 32
    151c:	41 93       	st	Z+, r20
    151e:	02 d0       	rcall	.+4      	; 0x1524 <__ultoa_invert+0x84>
    1520:	a9 f7       	brne	.-22     	; 0x150c <__ultoa_invert+0x6c>
    1522:	ea cf       	rjmp	.-44     	; 0x14f8 <__ultoa_invert+0x58>
    1524:	b4 e0       	ldi	r27, 0x04	; 4
    1526:	a6 95       	lsr	r26
    1528:	97 95       	ror	r25
    152a:	87 95       	ror	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	ba 95       	dec	r27
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__ultoa_invert+0x86>
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	61 05       	cpc	r22, r1
    1538:	71 05       	cpc	r23, r1
    153a:	08 95       	ret
    153c:	9b 01       	movw	r18, r22
    153e:	ac 01       	movw	r20, r24
    1540:	0a 2e       	mov	r0, r26
    1542:	06 94       	lsr	r0
    1544:	57 95       	ror	r21
    1546:	47 95       	ror	r20
    1548:	37 95       	ror	r19
    154a:	27 95       	ror	r18
    154c:	ba 95       	dec	r27
    154e:	c9 f7       	brne	.-14     	; 0x1542 <__ultoa_invert+0xa2>
    1550:	62 0f       	add	r22, r18
    1552:	73 1f       	adc	r23, r19
    1554:	84 1f       	adc	r24, r20
    1556:	95 1f       	adc	r25, r21
    1558:	a0 1d       	adc	r26, r0
    155a:	08 95       	ret

0000155c <__prologue_saves__>:
    155c:	2f 92       	push	r2
    155e:	3f 92       	push	r3
    1560:	4f 92       	push	r4
    1562:	5f 92       	push	r5
    1564:	6f 92       	push	r6
    1566:	7f 92       	push	r7
    1568:	8f 92       	push	r8
    156a:	9f 92       	push	r9
    156c:	af 92       	push	r10
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	ca 1b       	sub	r28, r26
    1586:	db 0b       	sbc	r29, r27
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	09 94       	ijmp

00001594 <__epilogue_restores__>:
    1594:	2a 88       	ldd	r2, Y+18	; 0x12
    1596:	39 88       	ldd	r3, Y+17	; 0x11
    1598:	48 88       	ldd	r4, Y+16	; 0x10
    159a:	5f 84       	ldd	r5, Y+15	; 0x0f
    159c:	6e 84       	ldd	r6, Y+14	; 0x0e
    159e:	7d 84       	ldd	r7, Y+13	; 0x0d
    15a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    15a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    15a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    15a6:	b9 84       	ldd	r11, Y+9	; 0x09
    15a8:	c8 84       	ldd	r12, Y+8	; 0x08
    15aa:	df 80       	ldd	r13, Y+7	; 0x07
    15ac:	ee 80       	ldd	r14, Y+6	; 0x06
    15ae:	fd 80       	ldd	r15, Y+5	; 0x05
    15b0:	0c 81       	ldd	r16, Y+4	; 0x04
    15b2:	1b 81       	ldd	r17, Y+3	; 0x03
    15b4:	aa 81       	ldd	r26, Y+2	; 0x02
    15b6:	b9 81       	ldd	r27, Y+1	; 0x01
    15b8:	ce 0f       	add	r28, r30
    15ba:	d1 1d       	adc	r29, r1
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	ed 01       	movw	r28, r26
    15c8:	08 95       	ret

000015ca <_exit>:
    15ca:	f8 94       	cli

000015cc <__stop_program>:
    15cc:	ff cf       	rjmp	.-2      	; 0x15cc <__stop_program>
